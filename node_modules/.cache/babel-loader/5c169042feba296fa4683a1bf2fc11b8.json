{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as REST from '../../api/rest';\nimport { appendNewService } from '../../store/ecosystems/actions';\nimport { creationPolicyFailed, creationPolicyStarted, creationPolicySuccess, fetchingPoliciesFailed, fetchingPoliciesStarted, fetchingPoliciesSuccess } from '../../store/policies/actions';\nexport function fetchPolicies() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var ecosystem, objects;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                ecosystem = getState().ecosystems.currentEcosystem;\n                dispatch(fetchingPoliciesStarted());\n                _context.next = 5;\n                return REST.fetchPolicies({\n                  customer: '',\n                  ecosystem: ecosystem\n                });\n\n              case 5:\n                objects = _context.sent;\n                dispatch(fetchingPoliciesSuccess(objects, ecosystem));\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                dispatch(fetchingPoliciesFailed(_context.t0));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 9]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function createPolicy(policy) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var ecosystem, createdPolicy;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                ecosystem = getState().ecosystems.currentecosystem.uuid;\n                dispatch(creationPolicyStarted());\n                _context2.next = 5;\n                return REST.createPolicy(policy, ecosystem);\n\n              case 5:\n                createdPolicy = _context2.sent;\n                dispatch(creationPolicySuccess(createdPolicy, ecosystem));\n                _context2.next = 12;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n                dispatch(creationPolicyFailed(_context2.t0));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 9]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function updatePolicy() {\n  return (\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              try {// const ecosystem = getState().ecosystems.currentEcosystem\n                // dispatch(updateObjectStarted())\n                // const objects = await REST.updateObject(entity, ecosystem)\n                // dispatch(updateObjectSuccess(objects, ecosystem))\n              } catch (err) {// dispatch(updateObjectFailed(err))\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }))\n  );\n}\nexport function createService(service) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n        var ecosystem, createdService;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                ecosystem = getState().ecosystems.currentEcosystem; // dispatch(updateObjectStarted())\n\n                _context4.next = 4;\n                return REST.createService(service, ecosystem);\n\n              case 4:\n                createdService = _context4.sent;\n                dispatch(appendNewService(createdService, ecosystem));\n                _context4.next = 10;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](0);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 8]]);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/views/Security/scenario-actions.js"],"names":["REST","appendNewService","creationPolicyFailed","creationPolicyStarted","creationPolicySuccess","fetchingPoliciesFailed","fetchingPoliciesStarted","fetchingPoliciesSuccess","fetchPolicies","dispatch","getState","ecosystem","ecosystems","currentEcosystem","customer","objects","createPolicy","policy","currentecosystem","uuid","createdPolicy","updatePolicy","err","createService","service","createdService"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,gBAAtB;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SACCC,oBADD,EAECC,qBAFD,EAGCC,qBAHD,EAICC,sBAJD,EAKCC,uBALD,EAMCC,uBAND,QAOO,8BAPP;AASA,OAAO,SAASC,aAAT,GAAyB;AAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECC,gBAAAA,SAFD,GAEaD,QAAQ,GAAGE,UAAX,CAAsBC,gBAFnC;AAGLJ,gBAAAA,QAAQ,CAACH,uBAAuB,EAAxB,CAAR;AAHK;AAAA,uBAIiBN,IAAI,CAACQ,aAAL,CAAmB;AACxCM,kBAAAA,QAAQ,EAAE,EAD8B;AAExCH,kBAAAA,SAAS,EAATA;AAFwC,iBAAnB,CAJjB;;AAAA;AAICI,gBAAAA,OAJD;AAQLN,gBAAAA,QAAQ,CAACF,uBAAuB,CAACQ,OAAD,EAAUJ,SAAV,CAAxB,CAAR;AARK;AAAA;;AAAA;AAAA;AAAA;AAULF,gBAAAA,QAAQ,CAACJ,sBAAsB,aAAvB,CAAR;;AAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAED,OAAO,SAASW,YAAT,CAAsBC,MAAtB,EAA8B;AACpC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOR,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECC,gBAAAA,SAFD,GAEaD,QAAQ,GAAGE,UAAX,CAAsBM,gBAAtB,CAAuCC,IAFpD;AAGLV,gBAAAA,QAAQ,CAACN,qBAAqB,EAAtB,CAAR;AAHK;AAAA,uBAIuBH,IAAI,CAACgB,YAAL,CAAkBC,MAAlB,EAA0BN,SAA1B,CAJvB;;AAAA;AAICS,gBAAAA,aAJD;AAKLX,gBAAAA,QAAQ,CAACL,qBAAqB,CAACgB,aAAD,EAAgBT,SAAhB,CAAtB,CAAR;AALK;AAAA;;AAAA;AAAA;AAAA;AAOLF,gBAAAA,QAAQ,CAACP,oBAAoB,cAArB,CAAR;;AAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAED,OAAO,SAASmB,YAAT,GAAwB;AAC9B;AAAA;AAAA;AAAA;AAAA,6BAAO;AAAA;AAAA;AAAA;AAAA;AACN,kBAAI,CACH;AACA;AACA;AACA;AACA,eALD,CAKE,OAAOC,GAAP,EAAY,CACb;AACA;;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAAA;AAUA;AAED,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOf,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECC,gBAAAA,SAFD,GAEaD,QAAQ,GAAGE,UAAX,CAAsBC,gBAFnC,EAGL;;AAHK;AAAA,uBAIwBb,IAAI,CAACuB,aAAL,CAAmBC,OAAnB,EAA4Bb,SAA5B,CAJxB;;AAAA;AAICc,gBAAAA,cAJD;AAKLhB,gBAAAA,QAAQ,CAACR,gBAAgB,CAACwB,cAAD,EAAiBd,SAAjB,CAAjB,CAAR;AALK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA","sourcesContent":["import * as REST from '../../api/rest'\nimport { appendNewService } from '../../store/ecosystems/actions'\nimport {\n\tcreationPolicyFailed,\n\tcreationPolicyStarted,\n\tcreationPolicySuccess,\n\tfetchingPoliciesFailed,\n\tfetchingPoliciesStarted,\n\tfetchingPoliciesSuccess\n} from '../../store/policies/actions'\n\nexport function fetchPolicies() {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tconst ecosystem = getState().ecosystems.currentEcosystem\n\t\t\tdispatch(fetchingPoliciesStarted())\n\t\t\tconst objects = await REST.fetchPolicies({\n\t\t\t\tcustomer: '',\n\t\t\t\tecosystem\n\t\t\t})\n\t\t\tdispatch(fetchingPoliciesSuccess(objects, ecosystem))\n\t\t} catch (err) {\n\t\t\tdispatch(fetchingPoliciesFailed(err))\n\t\t}\n\t}\n}\n\nexport function createPolicy(policy) {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tconst ecosystem = getState().ecosystems.currentecosystem.uuid\n\t\t\tdispatch(creationPolicyStarted())\n\t\t\tconst createdPolicy = await REST.createPolicy(policy, ecosystem)\n\t\t\tdispatch(creationPolicySuccess(createdPolicy, ecosystem))\n\t\t} catch (err) {\n\t\t\tdispatch(creationPolicyFailed(err))\n\t\t}\n\t}\n}\n\nexport function updatePolicy() {\n\treturn async () => {\n\t\ttry {\n\t\t\t// const ecosystem = getState().ecosystems.currentEcosystem\n\t\t\t// dispatch(updateObjectStarted())\n\t\t\t// const objects = await REST.updateObject(entity, ecosystem)\n\t\t\t// dispatch(updateObjectSuccess(objects, ecosystem))\n\t\t} catch (err) {\n\t\t\t// dispatch(updateObjectFailed(err))\n\t\t}\n\t}\n}\n\nexport function createService(service) {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tconst ecosystem = getState().ecosystems.currentEcosystem\n\t\t\t// dispatch(updateObjectStarted())\n\t\t\tconst createdService = await REST.createService(service, ecosystem)\n\t\t\tdispatch(appendNewService(createdService, ecosystem))\n\t\t} catch (err) {\n\t\t\t// dispatch(updateObjectFailed(err))\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}