{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as ES from '../../api/elasticsearch';\nimport * as api from '../../api/rest';\nimport { fetchingReportsFailed, fetchingReportsStarted, fetchingReportsSuccess } from '../../store/reports/actions';\nvar REPORTS_PER_PAGE = process.env.REACT_APP_REPORTS_PER_PAGE || 50;\nexport function fetchReports() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var reports;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                dispatch(fetchingReportsStarted());\n                _context.next = 4;\n                return api.fetchReports({\n                  ecosystem: getState().ecosystems.currentecosystem.uuid,\n                  customer: getState().auth.selectedCustomer.id,\n                  query: {\n                    query: {\n                      bool: {\n                        must: {\n                          match_all: {}\n                        }\n                      }\n                    },\n                    sort: {\n                      EventDatetime: {\n                        order: 'asc'\n                      }\n                    },\n                    size: REPORTS_PER_PAGE\n                  }\n                });\n\n              case 4:\n                reports = _context.sent;\n                dispatch(fetchingReportsSuccess(reports));\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                dispatch(fetchingReportsFailed(_context.t0));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function fetchNewest() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var element, results;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                element = getState().reports.items[0];\n                _context2.prev = 1;\n                dispatch(fetchingReportsStarted());\n                _context2.next = 5;\n                return ES.fetchReports({\n                  query: {\n                    bool: {\n                      must: {\n                        match_all: {}\n                      },\n                      filter: {\n                        range: {\n                          EventDatetime: {\n                            gt: element.date\n                          }\n                        }\n                      }\n                    }\n                  },\n                  sort: {\n                    EventDatetime: {\n                      order: 'desc'\n                    }\n                  },\n                  size: REPORTS_PER_PAGE\n                });\n\n              case 5:\n                results = _context2.sent;\n                dispatch(fetchingReportsSuccess(results, true));\n                _context2.next = 12;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](1);\n                dispatch(fetchingReportsFailed());\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 9]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function fetchOlder() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var element, results;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                element = getState().reports.items[getState().reports.items.length - 1];\n                _context3.prev = 1;\n                dispatch(fetchingReportsStarted());\n                _context3.next = 5;\n                return ES.fetchReports({\n                  query: {\n                    bool: {\n                      must: {\n                        match_all: {}\n                      },\n                      filter: {\n                        range: {\n                          EventDatetime: {\n                            lt: element.date\n                          }\n                        }\n                      }\n                    }\n                  },\n                  sort: {\n                    EventDatetime: {\n                      order: 'desc'\n                    }\n                  },\n                  size: REPORTS_PER_PAGE\n                });\n\n              case 5:\n                results = _context3.sent;\n                dispatch(fetchingReportsSuccess(results, true));\n                _context3.next = 12;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](1);\n                dispatch(fetchingReportsFailed());\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 9]]);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/views/Reports/scenario-actions.js"],"names":["ES","api","fetchingReportsFailed","fetchingReportsStarted","fetchingReportsSuccess","REPORTS_PER_PAGE","process","env","REACT_APP_REPORTS_PER_PAGE","fetchReports","dispatch","getState","ecosystem","ecosystems","currentecosystem","uuid","customer","auth","selectedCustomer","id","query","bool","must","match_all","sort","EventDatetime","order","size","reports","fetchNewest","element","items","filter","range","gt","date","results","fetchOlder","length","lt"],"mappings":"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","sourcesContent":["import * as ES from '../../api/elasticsearch'\nimport * as api from '../../api/rest'\nimport {\n\tfetchingReportsFailed,\n\tfetchingReportsStarted,\n\tfetchingReportsSuccess\n} from '../../store/reports/actions'\n\nconst REPORTS_PER_PAGE = process.env.REACT_APP_REPORTS_PER_PAGE || 50\n\nexport function fetchReports() {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tdispatch(fetchingReportsStarted())\n\t\t\tconst reports = await api.fetchReports({\n\t\t\t\tecosystem: getState().ecosystems.currentecosystem.uuid,\n\t\t\t\tcustomer: getState().auth.selectedCustomer.id,\n\t\t\t\tquery: {\n\t\t\t\t\tquery: {\n\t\t\t\t\t\tbool: {\n\t\t\t\t\t\t\tmust: {\n\t\t\t\t\t\t\t\tmatch_all: {}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsort: {\n\t\t\t\t\t\tEventDatetime: { order: 'asc' }\n\t\t\t\t\t},\n\t\t\t\t\tsize: REPORTS_PER_PAGE\n\t\t\t\t}\n\t\t\t})\n\t\t\tdispatch(fetchingReportsSuccess(reports))\n\t\t} catch (err) {\n\t\t\tdispatch(fetchingReportsFailed(err))\n\t\t}\n\t}\n}\n\nexport function fetchNewest() {\n\treturn async (dispatch, getState) => {\n\t\tconst element = getState().reports.items[0]\n\t\ttry {\n\t\t\tdispatch(fetchingReportsStarted())\n\t\t\tconst results = await ES.fetchReports({\n\t\t\t\tquery: {\n\t\t\t\t\tbool: {\n\t\t\t\t\t\tmust: { match_all: {} },\n\t\t\t\t\t\tfilter: {\n\t\t\t\t\t\t\trange: {\n\t\t\t\t\t\t\t\tEventDatetime: {\n\t\t\t\t\t\t\t\t\tgt: element.date\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsort: {\n\t\t\t\t\tEventDatetime: { order: 'desc' }\n\t\t\t\t},\n\t\t\t\tsize: REPORTS_PER_PAGE\n\t\t\t})\n\t\t\tdispatch(fetchingReportsSuccess(results, true))\n\t\t} catch (err) {\n\t\t\tdispatch(fetchingReportsFailed())\n\t\t}\n\t}\n}\n\nexport function fetchOlder() {\n\treturn async (dispatch, getState) => {\n\t\tconst element = getState().reports.items[\n\t\t\tgetState().reports.items.length - 1\n\t\t]\n\t\ttry {\n\t\t\tdispatch(fetchingReportsStarted())\n\t\t\tconst results = await ES.fetchReports({\n\t\t\t\tquery: {\n\t\t\t\t\tbool: {\n\t\t\t\t\t\tmust: { match_all: {} },\n\t\t\t\t\t\tfilter: {\n\t\t\t\t\t\t\trange: {\n\t\t\t\t\t\t\t\tEventDatetime: {\n\t\t\t\t\t\t\t\t\tlt: element.date\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsort: {\n\t\t\t\t\tEventDatetime: { order: 'desc' }\n\t\t\t\t},\n\t\t\t\tsize: REPORTS_PER_PAGE\n\t\t\t})\n\t\t\tdispatch(fetchingReportsSuccess(results, true))\n\t\t} catch (err) {\n\t\t\tdispatch(fetchingReportsFailed())\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}