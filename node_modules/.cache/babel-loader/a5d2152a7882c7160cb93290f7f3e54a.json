{"ast":null,"code":"import last from 'lodash/last';\nimport get from 'lodash/get';\nimport Chance from 'chance';\nexport var extractDataFromConfig = function extractDataFromConfig(config) {\n  var data = config.data;\n  data = JSON.parse(data);\n  return data;\n};\nexport var extractTokenFromConfig = function extractTokenFromConfig(config) {\n  var data = extractDataFromConfig(config);\n  var bearerString = get(data, ['headers', 'Authorization'], null);\n\n  if (bearerString) {\n    var bearerParts = bearerString.split(' ');\n    var token = last(bearerParts);\n    return token;\n  }\n};\nexport var extractEmailFromConfigUrl = function extractEmailFromConfigUrl(config) {\n  var url = config.url;\n  var urlParts = url.split('/');\n  var email = last(urlParts);\n  return email;\n};\nexport var randomResponseCreator = function randomResponseCreator(_ref) {\n  var success = _ref.success,\n      failure = _ref.failure;\n  var chance = new Chance();\n  var random = chance.bool({\n    likelihood: 60\n  });\n  return random ? [success.code, success.response] : [failure.code, failure.response];\n};","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/utils/axiosMockHelpers.js"],"names":["last","get","Chance","extractDataFromConfig","config","data","JSON","parse","extractTokenFromConfig","bearerString","bearerParts","split","token","extractEmailFromConfigUrl","url","urlParts","email","randomResponseCreator","success","failure","chance","random","bool","likelihood","code","response"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,MAAM,EAAI;AAAA,MACxCC,IADwC,GAC/BD,MAD+B,CACxCC,IADwC;AAE9CA,EAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACA,SAAOA,IAAP;AACA,CAJM;AAMP,OAAO,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAJ,MAAM,EAAI;AAC/C,MAAMC,IAAI,GAAGF,qBAAqB,CAACC,MAAD,CAAlC;AACA,MAAMK,YAAY,GAAGR,GAAG,CAACI,IAAD,EAAO,CAAC,SAAD,EAAY,eAAZ,CAAP,EAAqC,IAArC,CAAxB;;AACA,MAAII,YAAJ,EAAkB;AACjB,QAAMC,WAAW,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAApB;AACA,QAAMC,KAAK,GAAGZ,IAAI,CAACU,WAAD,CAAlB;AACA,WAAOE,KAAP;AACA;AACD,CARM;AAUP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAT,MAAM,EAAI;AAAA,MAC1CU,GAD0C,GAClCV,MADkC,CAC1CU,GAD0C;AAElD,MAAMC,QAAQ,GAAGD,GAAG,CAACH,KAAJ,CAAU,GAAV,CAAjB;AACA,MAAMK,KAAK,GAAGhB,IAAI,CAACe,QAAD,CAAlB;AACA,SAAOC,KAAP;AACA,CALM;AAOP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,OAA0B;AAAA,MAAvBC,OAAuB,QAAvBA,OAAuB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC9D,MAAMC,MAAM,GAAG,IAAIlB,MAAJ,EAAf;AACA,MAAMmB,MAAM,GAAGD,MAAM,CAACE,IAAP,CAAY;AAC1BC,IAAAA,UAAU,EAAE;AADc,GAAZ,CAAf;AAGA,SAAOF,MAAM,GACV,CAACH,OAAO,CAACM,IAAT,EAAeN,OAAO,CAACO,QAAvB,CADU,GAEV,CAACN,OAAO,CAACK,IAAT,EAAeL,OAAO,CAACM,QAAvB,CAFH;AAGA,CARM","sourcesContent":["import last from 'lodash/last'\nimport get from 'lodash/get'\nimport Chance from 'chance'\n\nexport const extractDataFromConfig = config => {\n\tlet { data } = config\n\tdata = JSON.parse(data)\n\treturn data\n}\n\nexport const extractTokenFromConfig = config => {\n\tconst data = extractDataFromConfig(config)\n\tconst bearerString = get(data, ['headers', 'Authorization'], null)\n\tif (bearerString) {\n\t\tconst bearerParts = bearerString.split(' ')\n\t\tconst token = last(bearerParts)\n\t\treturn token\n\t}\n}\n\nexport const extractEmailFromConfigUrl = config => {\n\tconst { url } = config\n\tconst urlParts = url.split('/')\n\tconst email = last(urlParts)\n\treturn email\n}\n\nexport const randomResponseCreator = ({ success, failure }) => {\n\tconst chance = new Chance()\n\tconst random = chance.bool({\n\t\tlikelihood: 60\n\t})\n\treturn random\n\t\t? [success.code, success.response]\n\t\t: [failure.code, failure.response]\n}\n"]},"metadata":{},"sourceType":"module"}