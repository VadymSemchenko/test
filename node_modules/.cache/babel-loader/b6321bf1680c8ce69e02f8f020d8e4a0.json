{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vadym/Documents/work/job/wedge/src/layouts/Dashboard/Dashboard.jsx\";\nimport Footer from 'components/Footer/Footer';\nimport Header from 'components/Header/Header';\nimport Sidebar from 'components/Sidebar/Sidebar';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport NotificationSystem from 'react-notification-system';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport dashboardRoutes from 'routes/dashboard.jsx';\nimport { style } from 'variables/Variables.jsx';\nimport ExpiryWarning from '../../components/ExpiryWarning/ExpiryWarning';\nimport { loadEcosystem as _loadEcosystem } from './scenario-actions';\nimport { createLoadingSelector } from '../../store/utils/selectors';\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: false\n    };\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var ecosystemUUID;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                ecosystemUUID = this.props.location.pathname.split('/')[2];\n                _context.next = 3;\n                return this.props.loadEcosystem(ecosystemUUID);\n\n              case 3:\n                this.setState({\n                  loaded: true\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(e) {\n      if (window.innerWidth < 993 && e.history.location.pathname !== e.location.pathname && document.documentElement.className.indexOf('nav-open') !== -1) {\n        document.documentElement.classList.toggle('nav-open');\n      }\n\n      if (e.history.action === 'PUSH') {\n        document.documentElement.scrollTop = 0;\n        document.scrollingElement.scrollTop = 0;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loaded = this.state.loaded;\n      return React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(ExpiryWarning, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(NotificationSystem, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), loaded && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Sidebar, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"main-panel\",\n        className: \"main-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: 'dashboard-navbar',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Header, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }))), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, dashboardRoutes.map(function (prop, key) {\n        if (prop.name === 'Notifications') {\n          var RouteComponent = prop.component;\n          return React.createElement(Route, {\n            path: prop.path,\n            key: key,\n            render: function render(routeProps) {\n              return React.createElement(RouteComponent, Object.assign({}, routeProps, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 67\n                },\n                __self: this\n              }));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          });\n        }\n\n        if (prop.redirect) {\n          return React.createElement(Redirect, {\n            from: prop.path,\n            to: prop.to,\n            key: key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          });\n        }\n\n        if (prop.nested) {\n          return prop.paths.map(function (r, nkey) {\n            return React.createElement(Route, {\n              path: r.path,\n              component: r.component,\n              key: nkey,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 77\n              },\n              __self: this\n            });\n          });\n        }\n\n        return React.createElement(Route, {\n          path: prop.path,\n          component: prop.component,\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        });\n      })), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nDashboard.propTypes = {\n  loadEcosystem: PropTypes.func.isRequired,\n  location: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired\n};\nvar loadingSelector = createLoadingSelector(['LOAD_ECOSYSTEM']);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: loadingSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    loadEcosystem: function loadEcosystem(ecosystemUUID) {\n      return dispatch(_loadEcosystem(ecosystemUUID));\n    }\n  };\n};\n\nvar ConnectedDashboardLayout = connect(mapStateToProps, mapDispatchToProps)(Dashboard);\nexport default withRouter(ConnectedDashboardLayout);","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/layouts/Dashboard/Dashboard.jsx"],"names":["Footer","Header","Sidebar","React","Component","connect","withRouter","NotificationSystem","Redirect","Route","Switch","PropTypes","dashboardRoutes","style","ExpiryWarning","loadEcosystem","createLoadingSelector","Dashboard","state","loaded","ecosystemUUID","props","location","pathname","split","setState","e","window","innerWidth","history","document","documentElement","className","indexOf","classList","toggle","action","scrollTop","scrollingElement","map","prop","key","name","RouteComponent","component","path","routeProps","redirect","to","nested","paths","r","nkey","propTypes","func","isRequired","object","loading","bool","loadingSelector","mapStateToProps","mapDispatchToProps","dispatch","ConnectedDashboardLayout"],"mappings":"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","sourcesContent":["import Footer from 'components/Footer/Footer'\nimport Header from 'components/Header/Header'\nimport Sidebar from 'components/Sidebar/Sidebar'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport NotificationSystem from 'react-notification-system'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport dashboardRoutes from 'routes/dashboard.jsx'\n\nimport { style } from 'variables/Variables.jsx'\nimport ExpiryWarning from '../../components/ExpiryWarning/ExpiryWarning'\nimport { loadEcosystem } from './scenario-actions'\nimport { createLoadingSelector } from '../../store/utils/selectors'\n\nclass Dashboard extends Component {\n\tstate = {\n\t\tloaded: false\n\t}\n\n\tasync componentDidMount() {\n\t\tconst ecosystemUUID = this.props.location.pathname.split('/')[2]\n\t\tawait this.props.loadEcosystem(ecosystemUUID)\n\t\tthis.setState({\n\t\t\tloaded: true\n\t\t})\n\t}\n\n\tcomponentDidUpdate(e) {\n\t\tif (\n\t\t\twindow.innerWidth < 993 &&\n\t\t\te.history.location.pathname !== e.location.pathname &&\n\t\t\tdocument.documentElement.className.indexOf('nav-open') !== -1\n\t\t) {\n\t\t\tdocument.documentElement.classList.toggle('nav-open')\n\t\t}\n\t\tif (e.history.action === 'PUSH') {\n\t\t\tdocument.documentElement.scrollTop = 0\n\t\t\tdocument.scrollingElement.scrollTop = 0\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { loaded } = this.state\n\t\treturn (\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<ExpiryWarning />\n\t\t\t\t<NotificationSystem style={style} />\n\t\t\t\t{loaded && (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<Sidebar {...this.props} />\n\t\t\t\t\t\t<div id=\"main-panel\" className=\"main-panel\">\n\t\t\t\t\t\t\t<div className={'dashboard-navbar'}>\n\t\t\t\t\t\t\t\t<Header {...this.props} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t{dashboardRoutes.map((prop, key) => {\n\t\t\t\t\t\t\t\t\tif (prop.name === 'Notifications') {\n\t\t\t\t\t\t\t\t\t\tconst RouteComponent = prop.component\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\t\t\t\t\tpath={prop.path}\n\t\t\t\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\t\t\t\trender={routeProps => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<RouteComponent {...routeProps} />\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (prop.redirect) {\n\t\t\t\t\t\t\t\t\t\treturn <Redirect from={prop.path} to={prop.to} key={key} />\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (prop.nested) {\n\t\t\t\t\t\t\t\t\t\treturn prop.paths.map((r, nkey) => (\n\t\t\t\t\t\t\t\t\t\t\t<Route path={r.path} component={r.component} key={nkey} />\n\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\t\t\t\tpath={prop.path}\n\t\t\t\t\t\t\t\t\t\t\tcomponent={prop.component}\n\t\t\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t<Footer />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nDashboard.propTypes = {\n\tloadEcosystem: PropTypes.func.isRequired,\n\tlocation: PropTypes.object.isRequired,\n\tloading: PropTypes.bool.isRequired\n}\n\nconst loadingSelector = createLoadingSelector(['LOAD_ECOSYSTEM'])\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tloading: loadingSelector(state)\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tloadEcosystem: ecosystemUUID => dispatch(loadEcosystem(ecosystemUUID))\n\t}\n}\n\nconst ConnectedDashboardLayout = connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Dashboard)\nexport default withRouter(ConnectedDashboardLayout)\n"]},"metadata":{},"sourceType":"module"}