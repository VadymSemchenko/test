{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as REST from '../../api/rest';\nimport { creationObjectFailed, creationObjectStarted, creationObjectSuccess, fetchingObjectsFailed, fetchingObjectsStarted, fetchingObjectsSuccess, updateObjectFailed, updateObjectStarted, updateObjectSuccess } from '../../store/objects/actions';\nexport function fetchObjects() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var ecosystem, objects;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                ecosystem = getState().ecosystems.currentEcosystem;\n                dispatch(fetchingObjectsStarted());\n                _context.next = 5;\n                return REST.fetchObjects({\n                  customer: '',\n                  ecosystem: ecosystem\n                });\n\n              case 5:\n                objects = _context.sent;\n                dispatch(fetchingObjectsSuccess(objects, ecosystem));\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                dispatch(fetchingObjectsFailed(_context.t0));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 9]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function createObject(entity, type) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var ecosystem, objects;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                ecosystem = getState().ecosystems.currentEcosystem;\n                dispatch(creationObjectStarted());\n                _context2.next = 5;\n                return REST.createObject(entity, type, ecosystem);\n\n              case 5:\n                objects = _context2.sent;\n                dispatch(creationObjectSuccess(objects, ecosystem));\n                _context2.next = 12;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n                dispatch(creationObjectFailed(_context2.t0));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 9]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function updateObject(entity) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var ecosystem, objects;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                ecosystem = getState().ecosystems.currentEcosystem;\n                dispatch(updateObjectStarted());\n                _context3.next = 5;\n                return REST.updateObject(entity, ecosystem);\n\n              case 5:\n                objects = _context3.sent;\n                dispatch(updateObjectSuccess(objects, ecosystem));\n                _context3.next = 12;\n                break;\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n                dispatch(updateObjectFailed(_context3.t0));\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/views/Objects/scenario-actions.js"],"names":["REST","creationObjectFailed","creationObjectStarted","creationObjectSuccess","fetchingObjectsFailed","fetchingObjectsStarted","fetchingObjectsSuccess","updateObjectFailed","updateObjectStarted","updateObjectSuccess","fetchObjects","dispatch","getState","ecosystem","ecosystems","currentEcosystem","customer","objects","createObject","entity","type","updateObject"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,gBAAtB;AACA,SACCC,oBADD,EAECC,qBAFD,EAGCC,qBAHD,EAICC,qBAJD,EAKCC,sBALD,EAMCC,sBAND,EAOCC,kBAPD,EAQCC,mBARD,EASCC,mBATD,QAUO,6BAVP;AAYA,OAAO,SAASC,YAAT,GAAwB;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECC,gBAAAA,SAFD,GAEaD,QAAQ,GAAGE,UAAX,CAAsBC,gBAFnC;AAGLJ,gBAAAA,QAAQ,CAACN,sBAAsB,EAAvB,CAAR;AAHK;AAAA,uBAIiBL,IAAI,CAACU,YAAL,CAAkB;AACvCM,kBAAAA,QAAQ,EAAE,EAD6B;AAEvCH,kBAAAA,SAAS,EAAEA;AAF4B,iBAAlB,CAJjB;;AAAA;AAICI,gBAAAA,OAJD;AAQLN,gBAAAA,QAAQ,CAACL,sBAAsB,CAACW,OAAD,EAAUJ,SAAV,CAAvB,CAAR;AARK;AAAA;;AAAA;AAAA;AAAA;AAULF,gBAAAA,QAAQ,CAACP,qBAAqB,aAAtB,CAAR;;AAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAED,OAAO,SAASc,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOT,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECC,gBAAAA,SAFD,GAEaD,QAAQ,GAAGE,UAAX,CAAsBC,gBAFnC;AAGLJ,gBAAAA,QAAQ,CAACT,qBAAqB,EAAtB,CAAR;AAHK;AAAA,uBAIiBF,IAAI,CAACkB,YAAL,CAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCP,SAAhC,CAJjB;;AAAA;AAICI,gBAAAA,OAJD;AAKLN,gBAAAA,QAAQ,CAACR,qBAAqB,CAACc,OAAD,EAAUJ,SAAV,CAAtB,CAAR;AALK;AAAA;;AAAA;AAAA;AAAA;AAOLF,gBAAAA,QAAQ,CAACV,oBAAoB,cAArB,CAAR;;AAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAED,OAAO,SAASoB,YAAT,CAAsBF,MAAtB,EAA8B;AACpC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOR,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECC,gBAAAA,SAFD,GAEaD,QAAQ,GAAGE,UAAX,CAAsBC,gBAFnC;AAGLJ,gBAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AAHK;AAAA,uBAIiBR,IAAI,CAACqB,YAAL,CAAkBF,MAAlB,EAA0BN,SAA1B,CAJjB;;AAAA;AAICI,gBAAAA,OAJD;AAKLN,gBAAAA,QAAQ,CAACF,mBAAmB,CAACQ,OAAD,EAAUJ,SAAV,CAApB,CAAR;AALK;AAAA;;AAAA;AAAA;AAAA;AAOLF,gBAAAA,QAAQ,CAACJ,kBAAkB,cAAnB,CAAR;;AAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA","sourcesContent":["import * as REST from '../../api/rest'\nimport {\n\tcreationObjectFailed,\n\tcreationObjectStarted,\n\tcreationObjectSuccess,\n\tfetchingObjectsFailed,\n\tfetchingObjectsStarted,\n\tfetchingObjectsSuccess,\n\tupdateObjectFailed,\n\tupdateObjectStarted,\n\tupdateObjectSuccess\n} from '../../store/objects/actions'\n\nexport function fetchObjects() {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tconst ecosystem = getState().ecosystems.currentEcosystem\n\t\t\tdispatch(fetchingObjectsStarted())\n\t\t\tconst objects = await REST.fetchObjects({\n\t\t\t\tcustomer: '',\n\t\t\t\tecosystem: ecosystem\n\t\t\t})\n\t\t\tdispatch(fetchingObjectsSuccess(objects, ecosystem))\n\t\t} catch (err) {\n\t\t\tdispatch(fetchingObjectsFailed(err))\n\t\t}\n\t}\n}\n\nexport function createObject(entity, type) {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tconst ecosystem = getState().ecosystems.currentEcosystem\n\t\t\tdispatch(creationObjectStarted())\n\t\t\tconst objects = await REST.createObject(entity, type, ecosystem)\n\t\t\tdispatch(creationObjectSuccess(objects, ecosystem))\n\t\t} catch (err) {\n\t\t\tdispatch(creationObjectFailed(err))\n\t\t}\n\t}\n}\n\nexport function updateObject(entity) {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tconst ecosystem = getState().ecosystems.currentEcosystem\n\t\t\tdispatch(updateObjectStarted())\n\t\t\tconst objects = await REST.updateObject(entity, ecosystem)\n\t\t\tdispatch(updateObjectSuccess(objects, ecosystem))\n\t\t} catch (err) {\n\t\t\tdispatch(updateObjectFailed(err))\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}