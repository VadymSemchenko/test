{"ast":null,"code":"// =========\n// = humps =\n// =========\n// Underscore-to-camelCase converter (and vice versa)\n// for strings and object keys\n// humps is copyright Â© 2012+ Dom Christie\n// Released under the MIT license.\n;\n\n(function (global) {\n  var _processKeys = function _processKeys(convert, obj, options) {\n    if (!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {\n      return obj;\n    }\n\n    var output,\n        i = 0,\n        l = 0;\n\n    if (_isArray(obj)) {\n      output = [];\n\n      for (l = obj.length; i < l; i++) {\n        output.push(_processKeys(convert, obj[i], options));\n      }\n    } else {\n      output = {};\n\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          output[convert(key, options)] = _processKeys(convert, obj[key], options);\n        }\n      }\n    }\n\n    return output;\n  }; // String conversion methods\n\n\n  var separateWords = function separateWords(string, options) {\n    options = options || {};\n    var separator = options.separator || '_';\n    var split = options.split || /(?=[A-Z])/;\n    return string.split(split).join(separator);\n  };\n\n  var camelize = function camelize(string) {\n    if (_isNumerical(string)) {\n      return string;\n    }\n\n    string = string.replace(/[\\-_\\s]+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    }); // Ensure 1st char is always lowercase\n\n    return string.substr(0, 1).toLowerCase() + string.substr(1);\n  };\n\n  var pascalize = function pascalize(string) {\n    var camelized = camelize(string); // Ensure 1st char is always uppercase\n\n    return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);\n  };\n\n  var decamelize = function decamelize(string, options) {\n    return separateWords(string, options).toLowerCase();\n  }; // Utilities\n  // Taken from Underscore.js\n\n\n  var toString = Object.prototype.toString;\n\n  var _isFunction = function _isFunction(obj) {\n    return typeof obj === 'function';\n  };\n\n  var _isObject = function _isObject(obj) {\n    return obj === Object(obj);\n  };\n\n  var _isArray = function _isArray(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  var _isDate = function _isDate(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n\n  var _isRegExp = function _isRegExp(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n\n  var _isBoolean = function _isBoolean(obj) {\n    return toString.call(obj) == '[object Boolean]';\n  }; // Performant way to determine if obj coerces to a number\n\n\n  var _isNumerical = function _isNumerical(obj) {\n    obj = obj - 0;\n    return obj === obj;\n  }; // Sets up function which handles processing keys\n  // allowing the convert function to be modified by a callback\n\n\n  var _processor = function _processor(convert, options) {\n    var callback = options && 'process' in options ? options.process : options;\n\n    if (typeof callback !== 'function') {\n      return convert;\n    }\n\n    return function (string, options) {\n      return callback(string, convert, options);\n    };\n  };\n\n  var humps = {\n    camelize: camelize,\n    decamelize: decamelize,\n    pascalize: pascalize,\n    depascalize: decamelize,\n    camelizeKeys: function camelizeKeys(object, options) {\n      return _processKeys(_processor(camelize, options), object);\n    },\n    decamelizeKeys: function decamelizeKeys(object, options) {\n      return _processKeys(_processor(decamelize, options), object, options);\n    },\n    pascalizeKeys: function pascalizeKeys(object, options) {\n      return _processKeys(_processor(pascalize, options), object);\n    },\n    depascalizeKeys: function depascalizeKeys() {\n      return this.decamelizeKeys.apply(this, arguments);\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(humps);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = humps;\n  } else {\n    global.humps = humps;\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}