{"ast":null,"code":"import _toConsumableArray from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { CLEAR_DATA } from '../common-action-types';\nimport { CREATION_OBJECT_SUCCESS, FETCHING_OBJECTS_SUCCESS, UPDATE_OBJECT_SUCCESS } from './action-types';\nvar initialState = {};\nexport function objectsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case FETCHING_OBJECTS_SUCCESS:\n      {\n        return _objectSpread({}, state, _defineProperty({}, payload.ecosystem.uuid, _objectSpread({}, state[payload.ecosystem.uuid], {\n          objects: payload.results\n        })));\n      }\n\n    case CREATION_OBJECT_SUCCESS:\n      {\n        return _objectSpread({}, state, _defineProperty({}, payload.ecosystem.uuid, _objectSpread({}, state[payload.ecosystem.uuid], {\n          objects: [payload.result].concat(_toConsumableArray(state[payload.ecosystem.uuid].objects))\n        })));\n      }\n\n    case UPDATE_OBJECT_SUCCESS:\n      {\n        return _objectSpread({}, state, _defineProperty({}, payload.ecosystem.uuid, _objectSpread({}, state[payload.ecosystem.uuid], {\n          objects: state[payload.ecosystem.uuid].objects.map(function (ob) {\n            return ob.id === payload.result.id ? payload.result : ob;\n          })\n        })));\n      }\n\n    case CLEAR_DATA:\n      {\n        return initialState;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/store/objects/reducer.js"],"names":["CLEAR_DATA","CREATION_OBJECT_SUCCESS","FETCHING_OBJECTS_SUCCESS","UPDATE_OBJECT_SUCCESS","initialState","objectsReducer","state","type","payload","ecosystem","uuid","objects","results","result","map","ob","id"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SACCC,uBADD,EAECC,wBAFD,EAGCC,qBAHD,QAIO,gBAJP;AAMA,IAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,SAASC,cAAT,GAAiE;AAAA,MAAzCC,KAAyC,uEAAjCF,YAAiC;;AAAA;AAAA,MAAjBG,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AACvE,UAAQD,IAAR;AACC,SAAKL,wBAAL;AAA+B;AAC9B,iCACII,KADJ,sBAEEE,OAAO,CAACC,SAAR,CAAkBC,IAFpB,oBAGKJ,KAAK,CAACE,OAAO,CAACC,SAAR,CAAkBC,IAAnB,CAHV;AAIEC,UAAAA,OAAO,EAAEH,OAAO,CAACI;AAJnB;AAOA;;AACD,SAAKX,uBAAL;AAA8B;AAC7B,iCACIK,KADJ,sBAEEE,OAAO,CAACC,SAAR,CAAkBC,IAFpB,oBAGKJ,KAAK,CAACE,OAAO,CAACC,SAAR,CAAkBC,IAAnB,CAHV;AAIEC,UAAAA,OAAO,GAAGH,OAAO,CAACK,MAAX,4BAAsBP,KAAK,CAACE,OAAO,CAACC,SAAR,CAAkBC,IAAnB,CAAL,CAA8BC,OAApD;AAJT;AAOA;;AACD,SAAKR,qBAAL;AAA4B;AAC3B,iCACIG,KADJ,sBAEEE,OAAO,CAACC,SAAR,CAAkBC,IAFpB,oBAGKJ,KAAK,CAACE,OAAO,CAACC,SAAR,CAAkBC,IAAnB,CAHV;AAIEC,UAAAA,OAAO,EAAEL,KAAK,CAACE,OAAO,CAACC,SAAR,CAAkBC,IAAnB,CAAL,CAA8BC,OAA9B,CAAsCG,GAAtC,CAA0C,UAAAC,EAAE;AAAA,mBACpDA,EAAE,CAACC,EAAH,KAAUR,OAAO,CAACK,MAAR,CAAeG,EAAzB,GAA8BR,OAAO,CAACK,MAAtC,GAA+CE,EADK;AAAA,WAA5C;AAJX;AASA;;AACD,SAAKf,UAAL;AAAiB;AAChB,eAAOI,YAAP;AACA;;AACD;AACC,aAAOE,KAAP;AAlCF;AAoCA","sourcesContent":["import { CLEAR_DATA } from '../common-action-types'\nimport {\n\tCREATION_OBJECT_SUCCESS,\n\tFETCHING_OBJECTS_SUCCESS,\n\tUPDATE_OBJECT_SUCCESS\n} from './action-types'\n\nconst initialState = {}\n\nexport function objectsReducer(state = initialState, { type, payload }) {\n\tswitch (type) {\n\t\tcase FETCHING_OBJECTS_SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[payload.ecosystem.uuid]: {\n\t\t\t\t\t...state[payload.ecosystem.uuid],\n\t\t\t\t\tobjects: payload.results\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcase CREATION_OBJECT_SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[payload.ecosystem.uuid]: {\n\t\t\t\t\t...state[payload.ecosystem.uuid],\n\t\t\t\t\tobjects: [payload.result, ...state[payload.ecosystem.uuid].objects]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcase UPDATE_OBJECT_SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[payload.ecosystem.uuid]: {\n\t\t\t\t\t...state[payload.ecosystem.uuid],\n\t\t\t\t\tobjects: state[payload.ecosystem.uuid].objects.map(ob =>\n\t\t\t\t\t\tob.id === payload.result.id ? payload.result : ob\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcase CLEAR_DATA: {\n\t\t\treturn initialState\n\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}