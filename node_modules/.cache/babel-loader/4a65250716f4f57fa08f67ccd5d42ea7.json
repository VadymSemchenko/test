{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { setCurrentEcosystem, loadEcosystemStarted, loadEcosystemSuccess } from '../../store/ecosystems/actions';\nimport * as REST from '../../api/rest';\nexport function loadEcosystem(ecosystemUUID) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var ecosystem, _ref2, _ref3, groups;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                dispatch(loadEcosystemStarted());\n                ecosystem = getState().ecosystems.items.find(function (eco) {\n                  return eco.uuid === ecosystemUUID;\n                });\n\n                if (ecosystem) {\n                  dispatch(setCurrentEcosystem(ecosystem));\n                }\n\n                _context.next = 6;\n                return Promise.all([REST.fetchGroups({\n                  ecosystem: ecosystem,\n                  customer: getState().auth.selectedCustomer\n                })]);\n\n              case 6:\n                _ref2 = _context.sent;\n                _ref3 = _slicedToArray(_ref2, 1);\n                groups = _ref3[0];\n                dispatch(loadEcosystemSuccess({\n                  groups: groups\n                }));\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/layouts/Dashboard/scenario-actions.js"],"names":["setCurrentEcosystem","loadEcosystemStarted","loadEcosystemSuccess","REST","loadEcosystem","ecosystemUUID","dispatch","getState","ecosystem","ecosystems","items","find","eco","uuid","Promise","all","fetchGroups","customer","auth","selectedCustomer","groups","console","log"],"mappings":";;;AAAA,SACCA,mBADD,EAECC,oBAFD,EAGCC,oBAHD,QAIO,gCAJP;AAKA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AAEA,OAAO,SAASC,aAAT,CAAuBC,aAAvB,EAAsC;AAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAELD,gBAAAA,QAAQ,CAACL,oBAAoB,EAArB,CAAR;AACMO,gBAAAA,SAHD,GAGaD,QAAQ,GAAGE,UAAX,CAAsBC,KAAtB,CAA4BC,IAA5B,CACjB,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAJ,KAAaR,aAAjB;AAAA,iBADc,CAHb;;AAML,oBAAIG,SAAJ,EAAe;AACdF,kBAAAA,QAAQ,CAACN,mBAAmB,CAACQ,SAAD,CAApB,CAAR;AACA;;AARI;AAAA,uBASkBM,OAAO,CAACC,GAAR,CAAY,CAClCZ,IAAI,CAACa,WAAL,CAAiB;AAChBR,kBAAAA,SAAS,EAATA,SADgB;AAEhBS,kBAAAA,QAAQ,EAAEV,QAAQ,GAAGW,IAAX,CAAgBC;AAFV,iBAAjB,CADkC,CAAZ,CATlB;;AAAA;AAAA;AAAA;AASEC,gBAAAA,MATF;AAeLd,gBAAAA,QAAQ,CACPJ,oBAAoB,CAAC;AACpBkB,kBAAAA,MAAM,EAANA;AADoB,iBAAD,CADb,CAAR;AAfK;AAAA;;AAAA;AAAA;AAAA;AAqBLC,gBAAAA,OAAO,CAACC,GAAR;;AArBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA","sourcesContent":["import {\n\tsetCurrentEcosystem,\n\tloadEcosystemStarted,\n\tloadEcosystemSuccess\n} from '../../store/ecosystems/actions'\nimport * as REST from '../../api/rest'\n\nexport function loadEcosystem(ecosystemUUID) {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tdispatch(loadEcosystemStarted())\n\t\t\tconst ecosystem = getState().ecosystems.items.find(\n\t\t\t\teco => eco.uuid === ecosystemUUID\n\t\t\t)\n\t\t\tif (ecosystem) {\n\t\t\t\tdispatch(setCurrentEcosystem(ecosystem))\n\t\t\t}\n\t\t\tconst [groups] = await Promise.all([\n\t\t\t\tREST.fetchGroups({\n\t\t\t\t\tecosystem,\n\t\t\t\t\tcustomer: getState().auth.selectedCustomer\n\t\t\t\t})\n\t\t\t])\n\t\t\tdispatch(\n\t\t\t\tloadEcosystemSuccess({\n\t\t\t\t\tgroups\n\t\t\t\t})\n\t\t\t)\n\t\t} catch (err) {\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}