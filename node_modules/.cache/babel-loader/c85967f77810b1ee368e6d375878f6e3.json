{"ast":null,"code":"import _toConsumableArray from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport Cookie from 'js-cookie';\nimport sortBy from 'lodash/sortBy';\nimport { CLEAR_DATA } from '../common-action-types';\nimport { APPEND_NEW_SERVICE, CREATE_ECOSYSTEM_SUCCESS, FETCHING_ECOSYSTEMS_SUCCESS, SET_CURRENT_ECOSYSTEM, LOAD_ECOSYSTEM_SUCCESS, CREATE_ECOSYSTEM_GROUP_SUCCESS } from './action-types';\nvar initialState = {\n  items: [],\n  currentEcosystem: Cookie.get('currentEcosystem') ? JSON.parse(Cookie.get('currentEcosystem')) : null,\n  dictionaries: {\n    groups: [],\n    services: [{\n      id: 0,\n      name: 'HTTP',\n      description: '123123',\n      port: '80',\n      protocol: 'TCP'\n    }, {\n      id: 1,\n      name: 'HTTPS',\n      description: '123123',\n      port: '443',\n      protocol: 'TCP'\n    }]\n  }\n};\nexport function ecosystemsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case FETCHING_ECOSYSTEMS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          items: sortBy(payload, function (eco) {\n            return eco.name;\n          })\n        });\n      }\n\n    case CREATE_ECOSYSTEM_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          items: sortBy([payload].concat(_toConsumableArray(state.items)), function (eco) {\n            return eco.name;\n          })\n        });\n      }\n\n    case SET_CURRENT_ECOSYSTEM:\n      {\n        return _objectSpread({}, state, {\n          currentEcosystem: payload\n        });\n      }\n\n    case APPEND_NEW_SERVICE:\n      {\n        return _objectSpread({}, state, {\n          dictionaries: _objectSpread({}, state.dictionaries, {\n            services: [].concat(_toConsumableArray(state.dictionaries.services), [payload.service])\n          })\n        });\n      }\n\n    case CLEAR_DATA:\n      {\n        Cookie.remove('currentEcosystem');\n        return initialState;\n      }\n\n    case LOAD_ECOSYSTEM_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          dictionaries: _objectSpread({}, state.dictionaries, {\n            groups: payload.groups\n          })\n        });\n      }\n\n    case CREATE_ECOSYSTEM_GROUP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          dictionaries: _objectSpread({}, state.dictionaries, {\n            groups: [].concat(_toConsumableArray(state.dictionaries.groups), [payload])\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/store/ecosystems/reducer.js"],"names":["Cookie","sortBy","CLEAR_DATA","APPEND_NEW_SERVICE","CREATE_ECOSYSTEM_SUCCESS","FETCHING_ECOSYSTEMS_SUCCESS","SET_CURRENT_ECOSYSTEM","LOAD_ECOSYSTEM_SUCCESS","CREATE_ECOSYSTEM_GROUP_SUCCESS","initialState","items","currentEcosystem","get","JSON","parse","dictionaries","groups","services","id","name","description","port","protocol","ecosystemsReducer","state","type","payload","eco","service","remove"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SACCC,kBADD,EAECC,wBAFD,EAGCC,2BAHD,EAICC,qBAJD,EAKCC,sBALD,EAMCC,8BAND,QAOO,gBAPP;AASA,IAAMC,YAAY,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,gBAAgB,EAAEX,MAAM,CAACY,GAAP,CAAW,kBAAX,IACfC,IAAI,CAACC,KAAL,CAAWd,MAAM,CAACY,GAAP,CAAW,kBAAX,CAAX,CADe,GAEf,IAJiB;AAKpBG,EAAAA,YAAY,EAAE;AACbC,IAAAA,MAAM,EAAE,EADK;AAEbC,IAAAA,QAAQ,EAAE,CACT;AACCC,MAAAA,EAAE,EAAE,CADL;AAECC,MAAAA,IAAI,EAAE,MAFP;AAGCC,MAAAA,WAAW,EAAE,QAHd;AAICC,MAAAA,IAAI,EAAE,IAJP;AAKCC,MAAAA,QAAQ,EAAE;AALX,KADS,EAQT;AACCJ,MAAAA,EAAE,EAAE,CADL;AAECC,MAAAA,IAAI,EAAE,OAFP;AAGCC,MAAAA,WAAW,EAAE,QAHd;AAICC,MAAAA,IAAI,EAAE,KAJP;AAKCC,MAAAA,QAAQ,EAAE;AALX,KARS;AAFG;AALM,CAArB;AA0BA,OAAO,SAASC,iBAAT,GAAoE;AAAA,MAAzCC,KAAyC,uEAAjCf,YAAiC;;AAAA;AAAA,MAAjBgB,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAC1E,UAAQD,IAAR;AACC,SAAKpB,2BAAL;AAAkC;AACjC,iCACImB,KADJ;AAECd,UAAAA,KAAK,EAAET,MAAM,CAACyB,OAAD,EAAU,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACR,IAAR;AAAA,WAAb;AAFd;AAIA;;AACD,SAAKf,wBAAL;AAA+B;AAC9B,iCACIoB,KADJ;AAECd,UAAAA,KAAK,EAAET,MAAM,EAAEyB,OAAF,4BAAcF,KAAK,CAACd,KAApB,IAA4B,UAAAiB,GAAG;AAAA,mBAAIA,GAAG,CAACR,IAAR;AAAA,WAA/B;AAFd;AAIA;;AACD,SAAKb,qBAAL;AAA4B;AAC3B,iCACIkB,KADJ;AAECb,UAAAA,gBAAgB,EAAEe;AAFnB;AAIA;;AACD,SAAKvB,kBAAL;AAAyB;AACxB,iCACIqB,KADJ;AAECT,UAAAA,YAAY,oBACRS,KAAK,CAACT,YADE;AAEXE,YAAAA,QAAQ,+BAAMO,KAAK,CAACT,YAAN,CAAmBE,QAAzB,IAAmCS,OAAO,CAACE,OAA3C;AAFG;AAFb;AAOA;;AACD,SAAK1B,UAAL;AAAiB;AAChBF,QAAAA,MAAM,CAAC6B,MAAP,CAAc,kBAAd;AACA,eAAOpB,YAAP;AACA;;AACD,SAAKF,sBAAL;AAA6B;AAC5B,iCACIiB,KADJ;AAECT,UAAAA,YAAY,oBACRS,KAAK,CAACT,YADE;AAEXC,YAAAA,MAAM,EAAEU,OAAO,CAACV;AAFL;AAFb;AAOA;;AACD,SAAKR,8BAAL;AAAqC;AACpC,iCACIgB,KADJ;AAECT,UAAAA,YAAY,oBACRS,KAAK,CAACT,YADE;AAEXC,YAAAA,MAAM,+BAAMQ,KAAK,CAACT,YAAN,CAAmBC,MAAzB,IAAiCU,OAAjC;AAFK;AAFb;AAOA;;AACD;AACC,aAAOF,KAAP;AAnDF;AAqDA","sourcesContent":["import Cookie from 'js-cookie'\nimport sortBy from 'lodash/sortBy'\nimport { CLEAR_DATA } from '../common-action-types'\nimport {\n\tAPPEND_NEW_SERVICE,\n\tCREATE_ECOSYSTEM_SUCCESS,\n\tFETCHING_ECOSYSTEMS_SUCCESS,\n\tSET_CURRENT_ECOSYSTEM,\n\tLOAD_ECOSYSTEM_SUCCESS,\n\tCREATE_ECOSYSTEM_GROUP_SUCCESS\n} from './action-types'\n\nconst initialState = {\n\titems: [],\n\tcurrentEcosystem: Cookie.get('currentEcosystem')\n\t\t? JSON.parse(Cookie.get('currentEcosystem'))\n\t\t: null,\n\tdictionaries: {\n\t\tgroups: [],\n\t\tservices: [\n\t\t\t{\n\t\t\t\tid: 0,\n\t\t\t\tname: 'HTTP',\n\t\t\t\tdescription: '123123',\n\t\t\t\tport: '80',\n\t\t\t\tprotocol: 'TCP'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'HTTPS',\n\t\t\t\tdescription: '123123',\n\t\t\t\tport: '443',\n\t\t\t\tprotocol: 'TCP'\n\t\t\t}\n\t\t]\n\t}\n}\n\nexport function ecosystemsReducer(state = initialState, { type, payload }) {\n\tswitch (type) {\n\t\tcase FETCHING_ECOSYSTEMS_SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\titems: sortBy(payload, eco => eco.name)\n\t\t\t}\n\t\t}\n\t\tcase CREATE_ECOSYSTEM_SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\titems: sortBy([payload, ...state.items], eco => eco.name)\n\t\t\t}\n\t\t}\n\t\tcase SET_CURRENT_ECOSYSTEM: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentEcosystem: payload\n\t\t\t}\n\t\t}\n\t\tcase APPEND_NEW_SERVICE: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdictionaries: {\n\t\t\t\t\t...state.dictionaries,\n\t\t\t\t\tservices: [...state.dictionaries.services, payload.service]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcase CLEAR_DATA: {\n\t\t\tCookie.remove('currentEcosystem')\n\t\t\treturn initialState\n\t\t}\n\t\tcase LOAD_ECOSYSTEM_SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdictionaries: {\n\t\t\t\t\t...state.dictionaries,\n\t\t\t\t\tgroups: payload.groups\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcase CREATE_ECOSYSTEM_GROUP_SUCCESS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdictionaries: {\n\t\t\t\t\t...state.dictionaries,\n\t\t\t\t\tgroups: [...state.dictionaries.groups, payload]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}