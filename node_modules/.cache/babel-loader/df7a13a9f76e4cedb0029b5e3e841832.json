{"ast":null,"code":"import _classCallCheck from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vadym/Documents/work/job/wedge/src/views/SignUpForm/PersonalInfoSubForm/PersonalInfoSubForm.jsx\";\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { withFormik } from 'formik';\nimport { func, string, shape, bool } from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Spinner from 'react-spinner-material';\nimport { personalInfoValidationSchema } from '../../../validationSchemas';\nimport { PERSON } from '../../../assets/Icons';\nimport { completeUser } from '../scenario-actions';\nimport { clearError } from '../../../store/user/actions';\nimport EmailDisplay from '../../../components/EmailDisplay/EmailDisplay';\nimport ErrorPanel from '../../../components/ErrorPanel/ErrorPanel';\nimport SuccessPanel from '../../../components/SuccessPanel/SuccessPanel';\nimport { isLoadingSelector, errorSelector, emailSelector } from '../../../store/user/selectors';\nimport '../sign-up-form.scss';\n\nvar PersonalInfoSubForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PersonalInfoSubForm, _Component);\n\n  function PersonalInfoSubForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PersonalInfoSubForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PersonalInfoSubForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      showEmailVerificationMessage: true,\n      showError: true\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      var _this$props = _this.props,\n          isValid = _this$props.isValid,\n          fullName = _this$props.values.fullName,\n          completeUser = _this$props.completeUser;\n\n      if (isValid !== true) {\n        _this.setState({\n          showError: true\n        });\n\n        return;\n      } else {\n        completeUser({\n          fullName: fullName\n        });\n      }\n    };\n\n    _this.closeEmailVerificationMessage = function () {\n      _this.setState(function () {\n        return {\n          showEmailVerificationMessage: false\n        };\n      });\n    };\n\n    _this.handleInputChange = function (event) {\n      var _this$props2 = _this.props,\n          handleChange = _this$props2.handleChange,\n          clearError = _this$props2.clearError,\n          serverError = _this$props2.serverError;\n      if (serverError) clearError();\n      var _this$state = _this.state,\n          showEmailVerificationMessage = _this$state.showEmailVerificationMessage,\n          showError = _this$state.showError;\n      showEmailVerificationMessage && _this.closeEmailVerificationMessage();\n      showError && _this.closeErrorPanel();\n      handleChange(event);\n    };\n\n    _this.closeErrorPanel = function () {\n      var _this$props3 = _this.props,\n          clearError = _this$props3.clearError,\n          serverError = _this$props3.serverError;\n      if (serverError) clearError();\n\n      _this.setState({\n        showError: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PersonalInfoSubForm, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.serverError !== this.props.serverError) {\n        this.setState({\n          showError: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          values = _this$props4.values,\n          setFieldTouched = _this$props4.setFieldTouched,\n          isLoading = _this$props4.isLoading,\n          errors = _this$props4.errors,\n          serverError = _this$props4.serverError;\n      var error = errors.fullName || serverError;\n      var _this$state2 = this.state,\n          showEmailVerificationMessage = _this$state2.showEmailVerificationMessage,\n          showError = _this$state2.showError;\n      var shouldErrorBeDisplayed = showError && error;\n      return React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        className: \"form-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, showEmailVerificationMessage && React.createElement(React.Fragment, null, React.createElement(SuccessPanel, {\n        message: \"Your email has been successfully verified\",\n        buttonClickHandler: this.closeEmailVerificationMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(EmailDisplay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), shouldErrorBeDisplayed && React.createElement(ErrorPanel, {\n        message: error,\n        buttonClickHandler: this.closeErrorPanel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: 'input-container',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: 'icon-container',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: PERSON,\n        className: 'person-icon',\n        alt: 'person-icon',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        value: values.name,\n        name: 'fullName',\n        placeholder: 'Full Name',\n        required: true,\n        onChange: this.handleInputChange,\n        onBlur: function onBlur() {\n          return setFieldTouched('fullName');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), isLoading ? React.createElement(Spinner, {\n        spinnerColor: \"#4986c5\",\n        className: \"spinner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }) : React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"signup-button\",\n        value: \"Next\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PersonalInfoSubForm;\n}(Component);\n\nPersonalInfoSubForm.propTypes = {\n  buttonTitle: string,\n  values: shape({\n    fullName: string\n  }).isRequired,\n  errors: shape({\n    firstName: string,\n    lastName: string\n  }),\n  isValid: bool.isRequired,\n  setFieldTouched: func.isRequired,\n  handleChange: func.isRequired,\n  email: string.isRequired,\n  isLoading: bool.isRequired,\n  completeUser: func.isRequired,\n  serverError: string.isRequired,\n  clearError: func.isRequired\n};\nPersonalInfoSubForm.defaultProps = {\n  buttonTitle: 'Sign Up',\n  isLoading: true\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isLoading: isLoadingSelector(state),\n    serverError: errorSelector(state),\n    email: emailSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    completeUser: completeUser,\n    clearError: clearError\n  }, dispatch);\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withFormik({\n  mapPropsToValues: function mapPropsToValues() {\n    return {\n      fullName: ''\n    };\n  },\n  validationSchema: personalInfoValidationSchema\n}))(PersonalInfoSubForm);","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/views/SignUpForm/PersonalInfoSubForm/PersonalInfoSubForm.jsx"],"names":["React","Component","compose","withFormik","func","string","shape","bool","bindActionCreators","connect","Spinner","personalInfoValidationSchema","PERSON","completeUser","clearError","EmailDisplay","ErrorPanel","SuccessPanel","isLoadingSelector","errorSelector","emailSelector","PersonalInfoSubForm","state","showEmailVerificationMessage","showError","onSubmit","event","preventDefault","props","isValid","fullName","values","setState","closeEmailVerificationMessage","handleInputChange","handleChange","serverError","closeErrorPanel","prevProps","setFieldTouched","isLoading","errors","error","shouldErrorBeDisplayed","name","propTypes","buttonTitle","isRequired","firstName","lastName","email","defaultProps","mapStateToProps","mapDispatchToProps","dispatch","mapPropsToValues","validationSchema"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { compose } from 'recompose'\nimport { withFormik } from 'formik'\nimport { func, string, shape, bool } from 'prop-types'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport Spinner from 'react-spinner-material'\n\nimport { personalInfoValidationSchema } from '../../../validationSchemas'\nimport { PERSON } from '../../../assets/Icons'\nimport { completeUser } from '../scenario-actions'\nimport { clearError } from '../../../store/user/actions'\nimport EmailDisplay from '../../../components/EmailDisplay/EmailDisplay'\nimport ErrorPanel from '../../../components/ErrorPanel/ErrorPanel'\nimport SuccessPanel from '../../../components/SuccessPanel/SuccessPanel'\nimport {\n\tisLoadingSelector,\n\terrorSelector,\n\temailSelector\n} from '../../../store/user/selectors'\nimport '../sign-up-form.scss'\n\nclass PersonalInfoSubForm extends Component {\n\tstate = {\n\t\tshowEmailVerificationMessage: true,\n\t\tshowError: true\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.serverError !== this.props.serverError) {\n\t\t\tthis.setState({\n\t\t\t\tshowError: true\n\t\t\t})\n\t\t}\n\t}\n\n\tonSubmit = event => {\n\t\tevent.preventDefault()\n\t\tconst {\n\t\t\tisValid,\n\t\t\tvalues: { fullName },\n\t\t\tcompleteUser\n\t\t} = this.props\n\t\tif (isValid !== true) {\n\t\t\tthis.setState({\n\t\t\t\tshowError: true\n\t\t\t})\n\t\t\treturn\n\t\t} else {\n\t\t\tcompleteUser({\n\t\t\t\tfullName\n\t\t\t})\n\t\t}\n\t}\n\n\tcloseEmailVerificationMessage = () => {\n\t\tthis.setState(() => ({\n\t\t\tshowEmailVerificationMessage: false\n\t\t}))\n\t}\n\n\thandleInputChange = event => {\n\t\tconst { handleChange, clearError, serverError } = this.props\n\t\tif (serverError) clearError()\n\t\tconst { showEmailVerificationMessage, showError } = this.state\n\t\tshowEmailVerificationMessage && this.closeEmailVerificationMessage()\n\t\tshowError && this.closeErrorPanel()\n\t\thandleChange(event)\n\t}\n\n\tcloseErrorPanel = () => {\n\t\tconst { clearError, serverError } = this.props\n\t\tif (serverError) clearError()\n\t\tthis.setState({\n\t\t\tshowError: false\n\t\t})\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tvalues,\n\t\t\tsetFieldTouched,\n\t\t\tisLoading,\n\t\t\terrors,\n\t\t\tserverError\n\t\t} = this.props\n\t\tconst error = errors.fullName || serverError\n\t\tconst { showEmailVerificationMessage, showError } = this.state\n\t\tconst shouldErrorBeDisplayed = showError && error\n\t\treturn (\n\t\t\t<form onSubmit={this.onSubmit} className=\"form-container\">\n\t\t\t\t{showEmailVerificationMessage && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<SuccessPanel\n\t\t\t\t\t\t\tmessage=\"Your email has been successfully verified\"\n\t\t\t\t\t\t\tbuttonClickHandler={this.closeEmailVerificationMessage}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<EmailDisplay />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{shouldErrorBeDisplayed && (\n\t\t\t\t\t<ErrorPanel\n\t\t\t\t\t\tmessage={error}\n\t\t\t\t\t\tbuttonClickHandler={this.closeErrorPanel}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<div className={'input-container'}>\n\t\t\t\t\t<div className={'icon-container'}>\n\t\t\t\t\t\t<img src={PERSON} className={'person-icon'} alt={'person-icon'} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={values.name}\n\t\t\t\t\t\tname={'fullName'}\n\t\t\t\t\t\tplaceholder={'Full Name'}\n\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t\tonBlur={() => setFieldTouched('fullName')}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{isLoading ? (\n\t\t\t\t\t<Spinner spinnerColor=\"#4986c5\" className=\"spinner\" />\n\t\t\t\t) : (\n\t\t\t\t\t<input type=\"submit\" className=\"signup-button\" value=\"Next\" />\n\t\t\t\t)}\n\t\t\t</form>\n\t\t)\n\t}\n}\n\nPersonalInfoSubForm.propTypes = {\n\tbuttonTitle: string,\n\tvalues: shape({\n\t\tfullName: string\n\t}).isRequired,\n\terrors: shape({\n\t\tfirstName: string,\n\t\tlastName: string\n\t}),\n\tisValid: bool.isRequired,\n\tsetFieldTouched: func.isRequired,\n\thandleChange: func.isRequired,\n\temail: string.isRequired,\n\tisLoading: bool.isRequired,\n\tcompleteUser: func.isRequired,\n\tserverError: string.isRequired,\n\tclearError: func.isRequired\n}\n\nPersonalInfoSubForm.defaultProps = {\n\tbuttonTitle: 'Sign Up',\n\tisLoading: true\n}\n\nconst mapStateToProps = state => ({\n\tisLoading: isLoadingSelector(state),\n\tserverError: errorSelector(state),\n\temail: emailSelector(state)\n})\n\nconst mapDispatchToProps = dispatch =>\n\tbindActionCreators(\n\t\t{\n\t\t\tcompleteUser,\n\t\t\tclearError\n\t\t},\n\t\tdispatch\n\t)\n\nexport default compose(\n\tconnect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps\n\t),\n\twithFormik({\n\t\tmapPropsToValues: () => ({\n\t\t\tfullName: ''\n\t\t}),\n\t\tvalidationSchema: personalInfoValidationSchema\n\t})\n)(PersonalInfoSubForm)\n"]},"metadata":{},"sourceType":"module"}