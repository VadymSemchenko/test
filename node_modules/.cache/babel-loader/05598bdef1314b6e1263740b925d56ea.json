{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar elasticsearch = axios.create({\n  baseURL: process.env.REACT_APP_ES_CLUSTER_URL\n});\nvar REPORTS_INDEX = 'elastictest';\nexport function fetchReports(_x) {\n  return _fetchReports.apply(this, arguments);\n}\n\nfunction _fetchReports() {\n  _fetchReports = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(query) {\n    var hits;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return elasticsearch.post(\"\".concat(REPORTS_INDEX, \"/_search\"), query).then(function (response) {\n              return response.data.hits.hits;\n            });\n\n          case 2:\n            hits = _context.sent;\n            return _context.abrupt(\"return\", hits.map(function (report) {\n              return _objectSpread({}, report._source, {\n                id: report._id\n              });\n            }).map(function (report) {\n              return {\n                id: report.id,\n                date: report.EventDatetime,\n                policy: report.PolicyID,\n                source: report.SourceID,\n                service: {\n                  protocol: '',\n                  port: report.DestinationPort,\n                  tcp: 'UDP',\n                  status: ''\n                },\n                application: '',\n                destination: report.DestinationID,\n                actions: [report.EventAction],\n                alert: 'Threat',\n                status: 'active'\n              };\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _fetchReports.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/api/elasticsearch.js"],"names":["axios","elasticsearch","create","baseURL","process","env","REACT_APP_ES_CLUSTER_URL","REPORTS_INDEX","fetchReports","query","post","then","response","data","hits","map","report","_source","id","_id","date","EventDatetime","policy","PolicyID","source","SourceID","service","protocol","port","DestinationPort","tcp","status","application","destination","DestinationID","actions","EventAction","alert"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAa;AAClCC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADa,CAAb,CAAtB;AAIA,IAAMC,aAAa,GAAG,aAAtB;AAEA,gBAAsBC,YAAtB;AAAA;AAAA;;;;;2BAAO,iBAA4BC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaR,aAAa,CAC9BS,IADiB,WACTH,aADS,eACgBE,KADhB,EAEjBE,IAFiB,CAEZ,UAAAC,QAAQ,EAAI;AACjB,qBAAOA,QAAQ,CAACC,IAAT,CAAcC,IAAd,CAAmBA,IAA1B;AACA,aAJiB,CADb;;AAAA;AACAA,YAAAA,IADA;AAAA,6CAMCA,IAAI,CACTC,GADK,CACD,UAAAC,MAAM;AAAA,uCAAUA,MAAM,CAACC,OAAjB;AAA0BC,gBAAAA,EAAE,EAAEF,MAAM,CAACG;AAArC;AAAA,aADL,EAELJ,GAFK,CAED,UAAAC,MAAM,EAAI;AACd,qBAAO;AACNE,gBAAAA,EAAE,EAAEF,MAAM,CAACE,EADL;AAENE,gBAAAA,IAAI,EAAEJ,MAAM,CAACK,aAFP;AAGNC,gBAAAA,MAAM,EAAEN,MAAM,CAACO,QAHT;AAINC,gBAAAA,MAAM,EAAER,MAAM,CAACS,QAJT;AAKNC,gBAAAA,OAAO,EAAE;AACRC,kBAAAA,QAAQ,EAAE,EADF;AAERC,kBAAAA,IAAI,EAAEZ,MAAM,CAACa,eAFL;AAGRC,kBAAAA,GAAG,EAAE,KAHG;AAIRC,kBAAAA,MAAM,EAAE;AAJA,iBALH;AAWNC,gBAAAA,WAAW,EAAE,EAXP;AAYNC,gBAAAA,WAAW,EAAEjB,MAAM,CAACkB,aAZd;AAaNC,gBAAAA,OAAO,EAAE,CAACnB,MAAM,CAACoB,WAAR,CAbH;AAcNC,gBAAAA,KAAK,EAAE,QAdD;AAeNN,gBAAAA,MAAM,EAAE;AAfF,eAAP;AAiBA,aApBK,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from 'axios'\n\nconst elasticsearch = axios.create({\n\tbaseURL: process.env.REACT_APP_ES_CLUSTER_URL\n})\n\nconst REPORTS_INDEX = 'elastictest'\n\nexport async function fetchReports(query) {\n\tconst hits = await elasticsearch\n\t\t.post(`${REPORTS_INDEX}/_search`, query)\n\t\t.then(response => {\n\t\t\treturn response.data.hits.hits\n\t\t})\n\treturn hits\n\t\t.map(report => ({ ...report._source, id: report._id }))\n\t\t.map(report => {\n\t\t\treturn {\n\t\t\t\tid: report.id,\n\t\t\t\tdate: report.EventDatetime,\n\t\t\t\tpolicy: report.PolicyID,\n\t\t\t\tsource: report.SourceID,\n\t\t\t\tservice: {\n\t\t\t\t\tprotocol: '',\n\t\t\t\t\tport: report.DestinationPort,\n\t\t\t\t\ttcp: 'UDP',\n\t\t\t\t\tstatus: ''\n\t\t\t\t},\n\t\t\t\tapplication: '',\n\t\t\t\tdestination: report.DestinationID,\n\t\t\t\tactions: [report.EventAction],\n\t\t\t\talert: 'Threat',\n\t\t\t\tstatus: 'active'\n\t\t\t}\n\t\t})\n}\n"]},"metadata":{},"sourceType":"module"}