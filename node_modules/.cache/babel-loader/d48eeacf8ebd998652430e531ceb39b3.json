{"ast":null,"code":"import { createAction } from 'redux-actions';\nimport { CREATE_ECOSYSTEM_GROUP_REQUESTED, APPEND_NEW_SERVICE, CREATE_ECOSYSTEM_FAILURE, CREATE_ECOSYSTEM_REQUESTED, CREATE_ECOSYSTEM_SUCCESS, FETCHING_ECOSYSTEMS_FAILURE, FETCHING_ECOSYSTEMS_REQUESTED, FETCHING_ECOSYSTEMS_SUCCESS, SET_CURRENT_ECOSYSTEM, LOAD_ECOSYSTEM_REQUESTED, LOAD_ECOSYSTEM_SUCCESS, CREATE_ECOSYSTEM_GROUP_SUCCESS, CREATE_ECOSYSTEM_GROUP_FAILURE } from './action-types';\nexport function setCurrentEcosystem(ecosystem) {\n  return {\n    type: SET_CURRENT_ECOSYSTEM,\n    payload: ecosystem\n  };\n}\nexport function fetchingEcosystemsStarted() {\n  return {\n    type: FETCHING_ECOSYSTEMS_REQUESTED\n  };\n}\nexport function fetchingEcosystemsSuccess(results) {\n  return {\n    type: FETCHING_ECOSYSTEMS_SUCCESS,\n    payload: results\n  };\n}\nexport function fetchingEcosystemsFailure(err) {\n  return {\n    type: FETCHING_ECOSYSTEMS_FAILURE,\n    payload: {\n      message: err\n    }\n  };\n}\nexport function createEcosystemStarted() {\n  return {\n    type: CREATE_ECOSYSTEM_REQUESTED\n  };\n}\nexport function createEcosystemSuccess(result) {\n  return {\n    type: CREATE_ECOSYSTEM_SUCCESS,\n    payload: result\n  };\n}\nexport function createEcosystemFailed(err) {\n  return {\n    type: CREATE_ECOSYSTEM_FAILURE,\n    payload: err\n  };\n}\nexport function appendNewService(service, ecosystem) {\n  return {\n    type: APPEND_NEW_SERVICE,\n    payload: {\n      ecosystem: ecosystem,\n      service: service\n    }\n  };\n}\nexport function loadEcosystemStarted() {\n  return {\n    type: LOAD_ECOSYSTEM_REQUESTED\n  };\n}\nexport function loadEcosystemSuccess(data) {\n  return {\n    type: LOAD_ECOSYSTEM_SUCCESS,\n    payload: data\n  };\n}\nexport var createEcosystemGroupRequested = createAction(CREATE_ECOSYSTEM_GROUP_REQUESTED);\nexport var createEcosystemGroupSuccess = createAction(CREATE_ECOSYSTEM_GROUP_SUCCESS);\nexport var createEcosystemGroupFailure = createAction(CREATE_ECOSYSTEM_GROUP_FAILURE);","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/store/ecosystems/actions.js"],"names":["createAction","CREATE_ECOSYSTEM_GROUP_REQUESTED","APPEND_NEW_SERVICE","CREATE_ECOSYSTEM_FAILURE","CREATE_ECOSYSTEM_REQUESTED","CREATE_ECOSYSTEM_SUCCESS","FETCHING_ECOSYSTEMS_FAILURE","FETCHING_ECOSYSTEMS_REQUESTED","FETCHING_ECOSYSTEMS_SUCCESS","SET_CURRENT_ECOSYSTEM","LOAD_ECOSYSTEM_REQUESTED","LOAD_ECOSYSTEM_SUCCESS","CREATE_ECOSYSTEM_GROUP_SUCCESS","CREATE_ECOSYSTEM_GROUP_FAILURE","setCurrentEcosystem","ecosystem","type","payload","fetchingEcosystemsStarted","fetchingEcosystemsSuccess","results","fetchingEcosystemsFailure","err","message","createEcosystemStarted","createEcosystemSuccess","result","createEcosystemFailed","appendNewService","service","loadEcosystemStarted","loadEcosystemSuccess","data","createEcosystemGroupRequested","createEcosystemGroupSuccess","createEcosystemGroupFailure"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SACCC,gCADD,EAECC,kBAFD,EAGCC,wBAHD,EAICC,0BAJD,EAKCC,wBALD,EAMCC,2BAND,EAOCC,6BAPD,EAQCC,2BARD,EASCC,qBATD,EAUCC,wBAVD,EAWCC,sBAXD,EAYCC,8BAZD,EAaCC,8BAbD,QAcO,gBAdP;AAgBA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAwC;AAC9C,SAAO;AACNC,IAAAA,IAAI,EAAEP,qBADA;AAENQ,IAAAA,OAAO,EAAEF;AAFH,GAAP;AAIA;AAED,OAAO,SAASG,yBAAT,GAAqC;AAC3C,SAAO;AACNF,IAAAA,IAAI,EAAET;AADA,GAAP;AAGA;AAED,OAAO,SAASY,yBAAT,CAAmCC,OAAnC,EAA4C;AAClD,SAAO;AACNJ,IAAAA,IAAI,EAAER,2BADA;AAENS,IAAAA,OAAO,EAAEG;AAFH,GAAP;AAIA;AAED,OAAO,SAASC,yBAAT,CAAmCC,GAAnC,EAAwC;AAC9C,SAAO;AACNN,IAAAA,IAAI,EAAEV,2BADA;AAENW,IAAAA,OAAO,EAAE;AACRM,MAAAA,OAAO,EAAED;AADD;AAFH,GAAP;AAMA;AAED,OAAO,SAASE,sBAAT,GAAkC;AACxC,SAAO;AACNR,IAAAA,IAAI,EAAEZ;AADA,GAAP;AAGA;AAED,OAAO,SAASqB,sBAAT,CAAgCC,MAAhC,EAAwC;AAC9C,SAAO;AACNV,IAAAA,IAAI,EAAEX,wBADA;AAENY,IAAAA,OAAO,EAAES;AAFH,GAAP;AAIA;AAED,OAAO,SAASC,qBAAT,CAA+BL,GAA/B,EAAoC;AAC1C,SAAO;AACNN,IAAAA,IAAI,EAAEb,wBADA;AAENc,IAAAA,OAAO,EAAEK;AAFH,GAAP;AAIA;AAED,OAAO,SAASM,gBAAT,CAA0BC,OAA1B,EAAmCd,SAAnC,EAA8C;AACpD,SAAO;AACNC,IAAAA,IAAI,EAAEd,kBADA;AAENe,IAAAA,OAAO,EAAE;AACRF,MAAAA,SAAS,EAATA,SADQ;AAERc,MAAAA,OAAO,EAAPA;AAFQ;AAFH,GAAP;AAOA;AAED,OAAO,SAASC,oBAAT,GAAgC;AACtC,SAAO;AACNd,IAAAA,IAAI,EAAEN;AADA,GAAP;AAGA;AAED,OAAO,SAASqB,oBAAT,CAA8BC,IAA9B,EAAoC;AAC1C,SAAO;AACNhB,IAAAA,IAAI,EAAEL,sBADA;AAENM,IAAAA,OAAO,EAAEe;AAFH,GAAP;AAIA;AAED,OAAO,IAAMC,6BAA6B,GAAGjC,YAAY,CACxDC,gCADwD,CAAlD;AAGP,OAAO,IAAMiC,2BAA2B,GAAGlC,YAAY,CACtDY,8BADsD,CAAhD;AAGP,OAAO,IAAMuB,2BAA2B,GAAGnC,YAAY,CACtDa,8BADsD,CAAhD","sourcesContent":["import { createAction } from 'redux-actions'\nimport {\n\tCREATE_ECOSYSTEM_GROUP_REQUESTED,\n\tAPPEND_NEW_SERVICE,\n\tCREATE_ECOSYSTEM_FAILURE,\n\tCREATE_ECOSYSTEM_REQUESTED,\n\tCREATE_ECOSYSTEM_SUCCESS,\n\tFETCHING_ECOSYSTEMS_FAILURE,\n\tFETCHING_ECOSYSTEMS_REQUESTED,\n\tFETCHING_ECOSYSTEMS_SUCCESS,\n\tSET_CURRENT_ECOSYSTEM,\n\tLOAD_ECOSYSTEM_REQUESTED,\n\tLOAD_ECOSYSTEM_SUCCESS,\n\tCREATE_ECOSYSTEM_GROUP_SUCCESS,\n\tCREATE_ECOSYSTEM_GROUP_FAILURE\n} from './action-types'\n\nexport function setCurrentEcosystem(ecosystem) {\n\treturn {\n\t\ttype: SET_CURRENT_ECOSYSTEM,\n\t\tpayload: ecosystem\n\t}\n}\n\nexport function fetchingEcosystemsStarted() {\n\treturn {\n\t\ttype: FETCHING_ECOSYSTEMS_REQUESTED\n\t}\n}\n\nexport function fetchingEcosystemsSuccess(results) {\n\treturn {\n\t\ttype: FETCHING_ECOSYSTEMS_SUCCESS,\n\t\tpayload: results\n\t}\n}\n\nexport function fetchingEcosystemsFailure(err) {\n\treturn {\n\t\ttype: FETCHING_ECOSYSTEMS_FAILURE,\n\t\tpayload: {\n\t\t\tmessage: err\n\t\t}\n\t}\n}\n\nexport function createEcosystemStarted() {\n\treturn {\n\t\ttype: CREATE_ECOSYSTEM_REQUESTED\n\t}\n}\n\nexport function createEcosystemSuccess(result) {\n\treturn {\n\t\ttype: CREATE_ECOSYSTEM_SUCCESS,\n\t\tpayload: result\n\t}\n}\n\nexport function createEcosystemFailed(err) {\n\treturn {\n\t\ttype: CREATE_ECOSYSTEM_FAILURE,\n\t\tpayload: err\n\t}\n}\n\nexport function appendNewService(service, ecosystem) {\n\treturn {\n\t\ttype: APPEND_NEW_SERVICE,\n\t\tpayload: {\n\t\t\tecosystem,\n\t\t\tservice\n\t\t}\n\t}\n}\n\nexport function loadEcosystemStarted() {\n\treturn {\n\t\ttype: LOAD_ECOSYSTEM_REQUESTED\n\t}\n}\n\nexport function loadEcosystemSuccess(data) {\n\treturn {\n\t\ttype: LOAD_ECOSYSTEM_SUCCESS,\n\t\tpayload: data\n\t}\n}\n\nexport const createEcosystemGroupRequested = createAction(\n\tCREATE_ECOSYSTEM_GROUP_REQUESTED\n)\nexport const createEcosystemGroupSuccess = createAction(\n\tCREATE_ECOSYSTEM_GROUP_SUCCESS\n)\nexport const createEcosystemGroupFailure = createAction(\n\tCREATE_ECOSYSTEM_GROUP_FAILURE\n)\n"]},"metadata":{},"sourceType":"module"}