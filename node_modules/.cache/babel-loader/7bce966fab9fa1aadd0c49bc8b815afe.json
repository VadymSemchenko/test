{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as REST from '../api/rest';\nimport { toast } from 'react-toastify';\nimport { createEcosystemGroupRequested, createEcosystemGroupSuccess, createEcosystemGroupFailure } from './ecosystems/actions';\nexport function createGroup(name) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                dispatch(createEcosystemGroupRequested());\n                _context.next = 4;\n                return REST.createGroup({\n                  customer: getState().auth.selectedCustomer,\n                  ecosystem: getState().ecosystems.currentEcosystem,\n                  name: name\n                });\n\n              case 4:\n                result = _context.sent;\n                dispatch(createEcosystemGroupSuccess(result));\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                toast.error('Cannot create group. Try again later!');\n                dispatch(createEcosystemGroupFailure(_context.t0));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/store/creational-scenario-actions.js"],"names":["REST","toast","createEcosystemGroupRequested","createEcosystemGroupSuccess","createEcosystemGroupFailure","createGroup","name","dispatch","getState","customer","auth","selectedCustomer","ecosystem","ecosystems","currentEcosystem","result","error"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,aAAtB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SACCC,6BADD,EAECC,2BAFD,EAGCC,2BAHD,QAIO,sBAJP;AAMA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACjC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELD,gBAAAA,QAAQ,CAACL,6BAA6B,EAA9B,CAAR;AAFK;AAAA,uBAGgBF,IAAI,CAACK,WAAL,CAAiB;AACrCI,kBAAAA,QAAQ,EAAED,QAAQ,GAAGE,IAAX,CAAgBC,gBADW;AAErCC,kBAAAA,SAAS,EAAEJ,QAAQ,GAAGK,UAAX,CAAsBC,gBAFI;AAGrCR,kBAAAA,IAAI,EAAJA;AAHqC,iBAAjB,CAHhB;;AAAA;AAGCS,gBAAAA,MAHD;AAQLR,gBAAAA,QAAQ,CAACJ,2BAA2B,CAACY,MAAD,CAA5B,CAAR;AARK;AAAA;;AAAA;AAAA;AAAA;AAULd,gBAAAA,KAAK,CAACe,KAAN,CAAY,uCAAZ;AACAT,gBAAAA,QAAQ,CAACH,2BAA2B,aAA5B,CAAR;;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA","sourcesContent":["import * as REST from '../api/rest'\nimport { toast } from 'react-toastify'\nimport {\n\tcreateEcosystemGroupRequested,\n\tcreateEcosystemGroupSuccess,\n\tcreateEcosystemGroupFailure\n} from './ecosystems/actions'\n\nexport function createGroup(name) {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tdispatch(createEcosystemGroupRequested())\n\t\t\tconst result = await REST.createGroup({\n\t\t\t\tcustomer: getState().auth.selectedCustomer,\n\t\t\t\tecosystem: getState().ecosystems.currentEcosystem,\n\t\t\t\tname\n\t\t\t})\n\t\t\tdispatch(createEcosystemGroupSuccess(result))\n\t\t} catch (err) {\n\t\t\ttoast.error('Cannot create group. Try again later!')\n\t\t\tdispatch(createEcosystemGroupFailure(err))\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}