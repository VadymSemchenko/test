{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nvar middlewares = [thunk];\n\nif (process.env.NODE_ENV === \"development\") {\n  var logger = createLogger({\n    duration: true,\n    diff: true\n  });\n  middlewares.push(logger);\n}\n\nvar configureStore = function configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var middleware = applyMiddleware.apply(void 0, middlewares);\n  return createStore(reducers, initialState, composeWithDevTools(middleware));\n};\n\nexport default configureStore();","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/store.js"],"names":["applyMiddleware","createStore","createLogger","thunk","reducers","composeWithDevTools","middlewares","process","env","NODE_ENV","logger","duration","diff","push","configureStore","initialState","middleware"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,IAAIC,WAAW,GAAG,CAACH,KAAD,CAAlB;;AAEA,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,kBAAJ,EAA4C;AAC3C,MAAMC,MAAM,GAAGR,YAAY,CAAC;AAC3BS,IAAAA,QAAQ,EAAE,IADiB;AAE3BC,IAAAA,IAAI,EAAE;AAFqB,GAAD,CAA3B;AAIAN,EAAAA,WAAW,CAACO,IAAZ,CAAiBH,MAAjB;AACA;;AAED,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;AAC7C,MAAMC,UAAU,GAAGhB,eAAe,MAAf,SAAmBM,WAAnB,CAAnB;AACA,SAAOL,WAAW,CAACG,QAAD,EAAWW,YAAX,EAAyBV,mBAAmB,CAACW,UAAD,CAA5C,CAAlB;AACA,CAHD;;AAKA,eAAeF,cAAc,EAA7B","sourcesContent":["import { applyMiddleware, createStore } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport reducers from './reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nlet middlewares = [thunk]\n\nif (process.env.NODE_ENV === `development`) {\n\tconst logger = createLogger({\n\t\tduration: true,\n\t\tdiff: true\n\t})\n\tmiddlewares.push(logger)\n}\n\nconst configureStore = (initialState = {}) => {\n\tconst middleware = applyMiddleware(...middlewares)\n\treturn createStore(reducers, initialState, composeWithDevTools(middleware))\n}\n\nexport default configureStore()\n"]},"metadata":{},"sourceType":"module"}