{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport unique from 'lodash/uniqBy';\nexport function extractCustomers(roles) {\n  if (!roles || roles === ' ') {\n    return [];\n  }\n\n  var split = roles.split(' ');\n  var customers = split.map(function (part) {\n    return {\n      name: part.split('.')[0],\n      id: part.split('.')[1]\n    };\n  });\n  return unique(customers, 'id');\n}\nexport function extractCustomerFromToken(token) {\n  var decodedToken = jwt.decode(token, {\n    json: true\n  });\n  return extractCustomers(decodedToken.roles);\n}\nexport function extractUsernameFromToken(token) {\n  var decodedToken = jwt.decode(token, {\n    json: true\n  });\n  return decodedToken.username;\n}\nexport function pathSlugToPageName(slug) {\n  switch (slug) {\n    case 'objects':\n      return 'Objects';\n\n    case 'contentlist':\n      return 'Content List';\n\n    case 'addresstranslations':\n      return 'Adress Translations';\n\n    default:\n      return slug;\n  }\n}\nexport function parseResponseError(error) {\n  var errorsArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (error.response) {\n    switch (error.response.status) {\n      case 400:\n        return errorsArray['400'] || 'Wrong request';\n\n      default:\n        return 'Something went wrong. Please again later.';\n    }\n  }\n\n  return 'Network error';\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/utils/utils.js"],"names":["jwt","unique","extractCustomers","roles","split","customers","map","part","name","id","extractCustomerFromToken","token","decodedToken","decode","json","extractUsernameFromToken","username","pathSlugToPageName","slug","parseResponseError","error","errorsArray","response","status"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AACvC,MAAI,CAACA,KAAD,IAAUA,KAAK,KAAK,GAAxB,EAA6B;AAC5B,WAAO,EAAP;AACA;;AACD,MAAMC,KAAK,GAAGD,KAAK,CAACC,KAAN,CAAY,GAAZ,CAAd;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,GAAN,CAAU,UAAAC,IAAI,EAAI;AACnC,WAAO;AACNC,MAAAA,IAAI,EAAED,IAAI,CAACH,KAAL,CAAW,GAAX,EAAgB,CAAhB,CADA;AAENK,MAAAA,EAAE,EAAEF,IAAI,CAACH,KAAL,CAAW,GAAX,EAAgB,CAAhB;AAFE,KAAP;AAIA,GALiB,CAAlB;AAOA,SAAOH,MAAM,CAACI,SAAD,EAAY,IAAZ,CAAb;AACA;AAED,OAAO,SAASK,wBAAT,CAAkCC,KAAlC,EAAyC;AAC/C,MAAMC,YAAY,GAAGZ,GAAG,CAACa,MAAJ,CAAWF,KAAX,EAAkB;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAAlB,CAArB;AACA,SAAOZ,gBAAgB,CAACU,YAAY,CAACT,KAAd,CAAvB;AACA;AAED,OAAO,SAASY,wBAAT,CAAkCJ,KAAlC,EAAyC;AAC/C,MAAMC,YAAY,GAAGZ,GAAG,CAACa,MAAJ,CAAWF,KAAX,EAAkB;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAAlB,CAArB;AACA,SAAOF,YAAY,CAACI,QAApB;AACA;AAED,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AACxC,UAAQA,IAAR;AACC,SAAK,SAAL;AACC,aAAO,SAAP;;AACD,SAAK,aAAL;AACC,aAAO,cAAP;;AACD,SAAK,qBAAL;AACC,aAAO,qBAAP;;AACD;AACC,aAAOA,IAAP;AARF;AAUA;AAED,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAqD;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;;AAC3D,MAAID,KAAK,CAACE,QAAV,EAAoB;AACnB,YAAQF,KAAK,CAACE,QAAN,CAAeC,MAAvB;AACC,WAAK,GAAL;AACC,eAAOF,WAAW,CAAC,KAAD,CAAX,IAAsB,eAA7B;;AACD;AACC,eAAO,2CAAP;AAJF;AAMA;;AACD,SAAO,eAAP;AACA","sourcesContent":["import jwt from 'jsonwebtoken'\nimport unique from 'lodash/uniqBy'\n\nexport function extractCustomers(roles) {\n\tif (!roles || roles === ' ') {\n\t\treturn []\n\t}\n\tconst split = roles.split(' ')\n\tconst customers = split.map(part => {\n\t\treturn {\n\t\t\tname: part.split('.')[0],\n\t\t\tid: part.split('.')[1]\n\t\t}\n\t})\n\n\treturn unique(customers, 'id')\n}\n\nexport function extractCustomerFromToken(token) {\n\tconst decodedToken = jwt.decode(token, { json: true })\n\treturn extractCustomers(decodedToken.roles)\n}\n\nexport function extractUsernameFromToken(token) {\n\tconst decodedToken = jwt.decode(token, { json: true })\n\treturn decodedToken.username\n}\n\nexport function pathSlugToPageName(slug) {\n\tswitch (slug) {\n\t\tcase 'objects':\n\t\t\treturn 'Objects'\n\t\tcase 'contentlist':\n\t\t\treturn 'Content List'\n\t\tcase 'addresstranslations':\n\t\t\treturn 'Adress Translations'\n\t\tdefault:\n\t\t\treturn slug\n\t}\n}\n\nexport function parseResponseError(error, errorsArray = {}) {\n\tif (error.response) {\n\t\tswitch (error.response.status) {\n\t\t\tcase 400:\n\t\t\t\treturn errorsArray['400'] || 'Wrong request'\n\t\t\tdefault:\n\t\t\t\treturn 'Something went wrong. Please again later.'\n\t\t}\n\t}\n\treturn 'Network error'\n}\n"]},"metadata":{},"sourceType":"module"}