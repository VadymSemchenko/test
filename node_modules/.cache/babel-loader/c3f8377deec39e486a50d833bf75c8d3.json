{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport jwt from 'jsonwebtoken';\nimport * as REST from '../../api/rest';\nimport history from '../../history';\nimport { loginFailed, loginStarted, loginSuccess } from '../../store/auth/actions';\nimport { extractCustomers, parseResponseError } from '../../utils/utils';\nexport function login(credentials, redirect) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var result, decodedToken, errorMessage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                dispatch(loginStarted());\n                _context.next = 4;\n                return REST.login({\n                  username: credentials.email,\n                  password: credentials.password\n                });\n\n              case 4:\n                result = _context.sent;\n                decodedToken = jwt.decode(result.accessToken, {\n                  json: true\n                });\n                dispatch(loginSuccess({\n                  accessToken: result.accessToken,\n                  customers: extractCustomers(decodedToken.roles)\n                }));\n                history.push('/auth/customers', {\n                  from: redirect,\n                  afterLogin: true\n                });\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                errorMessage = parseResponseError(_context.t0, {\n                  400: 'Your email or password is incorrect!'\n                });\n                dispatch(loginFailed({\n                  message: errorMessage\n                }));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/views/LoginForm/scenario-actions.js"],"names":["jwt","REST","history","loginFailed","loginStarted","loginSuccess","extractCustomers","parseResponseError","login","credentials","redirect","dispatch","username","email","password","result","decodedToken","decode","accessToken","json","customers","roles","push","from","afterLogin","errorMessage","message"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SACCC,WADD,EAECC,YAFD,EAGCC,YAHD,QAIO,0BAJP;AAKA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,mBAArD;AAEA,OAAO,SAASC,KAAT,CAAeC,WAAf,EAA4BC,QAA5B,EAAsC;AAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELA,gBAAAA,QAAQ,CAACP,YAAY,EAAb,CAAR;AAFK;AAAA,uBAGgBH,IAAI,CAACO,KAAL,CAAW;AAC/BI,kBAAAA,QAAQ,EAAEH,WAAW,CAACI,KADS;AAE/BC,kBAAAA,QAAQ,EAAEL,WAAW,CAACK;AAFS,iBAAX,CAHhB;;AAAA;AAGCC,gBAAAA,MAHD;AAOCC,gBAAAA,YAPD,GAOgBhB,GAAG,CAACiB,MAAJ,CAAWF,MAAM,CAACG,WAAlB,EAA+B;AAAEC,kBAAAA,IAAI,EAAE;AAAR,iBAA/B,CAPhB;AAQLR,gBAAAA,QAAQ,CACPN,YAAY,CAAC;AACZa,kBAAAA,WAAW,EAAEH,MAAM,CAACG,WADR;AAEZE,kBAAAA,SAAS,EAAEd,gBAAgB,CAACU,YAAY,CAACK,KAAd;AAFf,iBAAD,CADL,CAAR;AAMAnB,gBAAAA,OAAO,CAACoB,IAAR,CAAa,iBAAb,EAAgC;AAC/BC,kBAAAA,IAAI,EAAEb,QADyB;AAE/Bc,kBAAAA,UAAU,EAAE;AAFmB,iBAAhC;AAdK;AAAA;;AAAA;AAAA;AAAA;AAmBCC,gBAAAA,YAnBD,GAmBgBlB,kBAAkB,cAAM;AAC5C,uBAAK;AADuC,iBAAN,CAnBlC;AAsBLI,gBAAAA,QAAQ,CAACR,WAAW,CAAC;AAAEuB,kBAAAA,OAAO,EAAED;AAAX,iBAAD,CAAZ,CAAR;;AAtBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA","sourcesContent":["import jwt from 'jsonwebtoken'\nimport * as REST from '../../api/rest'\nimport history from '../../history'\nimport {\n\tloginFailed,\n\tloginStarted,\n\tloginSuccess\n} from '../../store/auth/actions'\nimport { extractCustomers, parseResponseError } from '../../utils/utils'\n\nexport function login(credentials, redirect) {\n\treturn async dispatch => {\n\t\ttry {\n\t\t\tdispatch(loginStarted())\n\t\t\tconst result = await REST.login({\n\t\t\t\tusername: credentials.email,\n\t\t\t\tpassword: credentials.password\n\t\t\t})\n\t\t\tconst decodedToken = jwt.decode(result.accessToken, { json: true })\n\t\t\tdispatch(\n\t\t\t\tloginSuccess({\n\t\t\t\t\taccessToken: result.accessToken,\n\t\t\t\t\tcustomers: extractCustomers(decodedToken.roles)\n\t\t\t\t})\n\t\t\t)\n\t\t\thistory.push('/auth/customers', {\n\t\t\t\tfrom: redirect,\n\t\t\t\tafterLogin: true\n\t\t\t})\n\t\t} catch (err) {\n\t\t\tconst errorMessage = parseResponseError(err, {\n\t\t\t\t400: 'Your email or password is incorrect!'\n\t\t\t})\n\t\t\tdispatch(loginFailed({ message: errorMessage }))\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}