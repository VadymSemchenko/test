{"ast":null,"code":"import _classCallCheck from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vadym/Documents/work/job/wedge/src/views/Ecosystems/Ecosystems.jsx\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport { connect } from 'react-redux';\nimport CustomButton from '../../components/CustomButton/CustomButton';\nimport FetchErrorMessage from '../../components/FetchErrorMessage/FetchErrorMessage';\nimport Loader from '../../components/Loader/Loader';\nimport WedgeModal from '../../components/WedgeModal/WedgeModal';\nimport { createErrorMessageSelector, createLoadingSelector } from '../../store/utils/selectors';\nimport CreateNewEcosystem from '../Modals/CreateNewEcosystem';\nimport AddEcosystem from './components/AddEcosystem/AddEcosystem';\nimport EcosystemItem from './components/EcosystemItem/EcosystemItem';\nimport PendingEcosystemItem from './components/PendingEcosystemItem/PendingEcosystemItem';\nimport './ecosystems.scss';\nimport { createEcosystem as _createEcosystem, fetchEcosystems as _fetchEcosystems, openEcosystem as _openEcosystem } from './scenario-actions';\nModal.setAppElement('#modal-root');\n\nvar Ecosystems =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Ecosystems, _Component);\n\n  function Ecosystems() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Ecosystems);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Ecosystems)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      newEcosystemModalOpened: false\n    };\n\n    _this.handleClick = function (ecosystem) {\n      _this.props.openEcosystem(ecosystem);\n    };\n\n    _this.handleCloseModal = function () {\n      _this.setState({\n        newEcosystemModalOpened: false\n      });\n    };\n\n    _this.handleOpenModal = function () {\n      _this.setState({\n        newEcosystemModalOpened: true\n      });\n    };\n\n    _this.handleCreateEcosystem = function (entity) {\n      _this.setState({\n        newEcosystemModalOpened: false\n      });\n\n      _this.props.createEcosystem(entity);\n    };\n\n    _this.renderLoader = function () {\n      return React.createElement(\"div\", {\n        className: 'loader-container',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    };\n\n    _this.renderEcosystems = function () {\n      var _this$props = _this.props,\n          ecosystems = _this$props.ecosystems,\n          createLoading = _this$props.createLoading;\n      return React.createElement(\"div\", {\n        className: 'ecosystems',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(AddEcosystem, {\n        onClick: _this.handleOpenModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), createLoading && React.createElement(PendingEcosystemItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), ecosystems.map(function (eco, index) {\n        return React.createElement(EcosystemItem, {\n          ecosystem: eco,\n          onClick: function onClick() {\n            return _this.handleClick(eco);\n          },\n          key: \"ecosystems-list-index-\".concat(index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        });\n      }), React.createElement(WedgeModal, {\n        title: 'Add New Ecosystem',\n        onClose: _this.handleCloseModal,\n        isOpen: _this.state.newEcosystemModalOpened,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(CreateNewEcosystem, {\n        onFinish: _this.handleCreateEcosystem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })));\n    };\n\n    return _this;\n  }\n\n  _createClass(Ecosystems, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchEcosystems();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          fetchLoading = _this$props2.fetchLoading,\n          error = _this$props2.error;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, error && React.createElement(\"div\", {\n        className: 'error-container',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(FetchErrorMessage, {\n        text: error.message,\n        onRetry: this.props.fetchEcosystems,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })), fetchLoading ? this.renderLoader() : this.renderEcosystems(), React.createElement(\"div\", {\n        className: 'refresh-button',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(CustomButton, {\n        onClick: this.props.fetchEcosystems,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Refresh\")));\n    }\n  }]);\n\n  return Ecosystems;\n}(Component);\n\nEcosystems.defaultProps = {\n  ecosystems: []\n};\nEcosystems.propTypes = {\n  fetchLoading: PropTypes.bool.isRequired,\n  createLoading: PropTypes.bool.isRequired,\n  error: PropTypes.string.isRequired,\n  ecosystems: PropTypes.array.isRequired,\n  fetchEcosystems: PropTypes.func.isRequired,\n  openEcosystem: PropTypes.func.isRequired,\n  createEcosystem: PropTypes.func.isRequired\n};\nvar fetchLoadingSelector = createLoadingSelector(['FETCHING_ECOSYSTEMS']);\nvar createEcosystemLoadingSelector = createLoadingSelector(['CREATE_ECOSYSTEM']);\nvar errorSelector = createErrorMessageSelector(['FETCHING_ECOSYSTEMS']);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    fetchLoading: fetchLoadingSelector(state),\n    createLoading: createEcosystemLoadingSelector(state),\n    ecosystems: state.ecosystems.items,\n    error: errorSelector(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchEcosystems: function fetchEcosystems() {\n      return dispatch(_fetchEcosystems());\n    },\n    openEcosystem: function openEcosystem(ecosystem) {\n      return dispatch(_openEcosystem(ecosystem));\n    },\n    createEcosystem: function createEcosystem(ecosystem) {\n      return dispatch(_createEcosystem(ecosystem));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ecosystems);","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/views/Ecosystems/Ecosystems.jsx"],"names":["PropTypes","React","Component","Modal","connect","CustomButton","FetchErrorMessage","Loader","WedgeModal","createErrorMessageSelector","createLoadingSelector","CreateNewEcosystem","AddEcosystem","EcosystemItem","PendingEcosystemItem","createEcosystem","fetchEcosystems","openEcosystem","setAppElement","Ecosystems","state","newEcosystemModalOpened","handleClick","ecosystem","props","handleCloseModal","setState","handleOpenModal","handleCreateEcosystem","entity","renderLoader","renderEcosystems","ecosystems","createLoading","map","eco","index","fetchLoading","error","message","defaultProps","propTypes","bool","isRequired","string","array","func","fetchLoadingSelector","createEcosystemLoadingSelector","errorSelector","mapStateToProps","items","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport Modal from 'react-modal'\nimport { connect } from 'react-redux'\nimport CustomButton from '../../components/CustomButton/CustomButton'\nimport FetchErrorMessage from '../../components/FetchErrorMessage/FetchErrorMessage'\nimport Loader from '../../components/Loader/Loader'\nimport WedgeModal from '../../components/WedgeModal/WedgeModal'\nimport {\n\tcreateErrorMessageSelector,\n\tcreateLoadingSelector\n} from '../../store/utils/selectors'\nimport CreateNewEcosystem from '../Modals/CreateNewEcosystem'\nimport AddEcosystem from './components/AddEcosystem/AddEcosystem'\nimport EcosystemItem from './components/EcosystemItem/EcosystemItem'\nimport PendingEcosystemItem from './components/PendingEcosystemItem/PendingEcosystemItem'\nimport './ecosystems.scss'\nimport {\n\tcreateEcosystem,\n\tfetchEcosystems,\n\topenEcosystem\n} from './scenario-actions'\n\nModal.setAppElement('#modal-root')\n\nclass Ecosystems extends Component {\n\tstate = {\n\t\tnewEcosystemModalOpened: false\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.fetchEcosystems()\n\t}\n\n\thandleClick = ecosystem => {\n\t\tthis.props.openEcosystem(ecosystem)\n\t}\n\n\thandleCloseModal = () => {\n\t\tthis.setState({\n\t\t\tnewEcosystemModalOpened: false\n\t\t})\n\t}\n\n\thandleOpenModal = () => {\n\t\tthis.setState({\n\t\t\tnewEcosystemModalOpened: true\n\t\t})\n\t}\n\n\thandleCreateEcosystem = entity => {\n\t\tthis.setState({\n\t\t\tnewEcosystemModalOpened: false\n\t\t})\n\t\tthis.props.createEcosystem(entity)\n\t}\n\n\trenderLoader = () => {\n\t\treturn (\n\t\t\t<div className={'loader-container'}>\n\t\t\t\t<Loader />\n\t\t\t</div>\n\t\t)\n\t}\n\n\trenderEcosystems = () => {\n\t\tconst { ecosystems, createLoading } = this.props\n\t\treturn (\n\t\t\t<div className={'ecosystems'}>\n\t\t\t\t<AddEcosystem onClick={this.handleOpenModal} />\n\t\t\t\t{createLoading && <PendingEcosystemItem />}\n\t\t\t\t{ecosystems.map((eco, index) => (\n\t\t\t\t\t<EcosystemItem\n\t\t\t\t\t\tecosystem={eco}\n\t\t\t\t\t\tonClick={() => this.handleClick(eco)}\n\t\t\t\t\t\tkey={`ecosystems-list-index-${index}`}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<WedgeModal\n\t\t\t\t\ttitle={'Add New Ecosystem'}\n\t\t\t\t\tonClose={this.handleCloseModal}\n\t\t\t\t\tisOpen={this.state.newEcosystemModalOpened}\n\t\t\t\t>\n\t\t\t\t\t<CreateNewEcosystem onFinish={this.handleCreateEcosystem} />\n\t\t\t\t</WedgeModal>\n\t\t\t</div>\n\t\t)\n\t}\n\n\trender() {\n\t\tconst { fetchLoading, error } = this.props\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{error && (\n\t\t\t\t\t<div className={'error-container'}>\n\t\t\t\t\t\t<FetchErrorMessage\n\t\t\t\t\t\t\ttext={error.message}\n\t\t\t\t\t\t\tonRetry={this.props.fetchEcosystems}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{fetchLoading ? this.renderLoader() : this.renderEcosystems()}\n\t\t\t\t<div className={'refresh-button'}>\n\t\t\t\t\t<CustomButton onClick={this.props.fetchEcosystems}>\n\t\t\t\t\t\tRefresh\n\t\t\t\t\t</CustomButton>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nEcosystems.defaultProps = {\n\tecosystems: []\n}\n\nEcosystems.propTypes = {\n\tfetchLoading: PropTypes.bool.isRequired,\n\tcreateLoading: PropTypes.bool.isRequired,\n\terror: PropTypes.string.isRequired,\n\tecosystems: PropTypes.array.isRequired,\n\tfetchEcosystems: PropTypes.func.isRequired,\n\topenEcosystem: PropTypes.func.isRequired,\n\tcreateEcosystem: PropTypes.func.isRequired\n}\n\nconst fetchLoadingSelector = createLoadingSelector(['FETCHING_ECOSYSTEMS'])\nconst createEcosystemLoadingSelector = createLoadingSelector([\n\t'CREATE_ECOSYSTEM'\n])\nconst errorSelector = createErrorMessageSelector(['FETCHING_ECOSYSTEMS'])\nconst mapStateToProps = state => {\n\treturn {\n\t\tfetchLoading: fetchLoadingSelector(state),\n\t\tcreateLoading: createEcosystemLoadingSelector(state),\n\t\tecosystems: state.ecosystems.items,\n\t\terror: errorSelector(state)\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tfetchEcosystems: () => dispatch(fetchEcosystems()),\n\t\topenEcosystem: ecosystem => dispatch(openEcosystem(ecosystem)),\n\t\tcreateEcosystem: ecosystem => dispatch(createEcosystem(ecosystem))\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Ecosystems)\n"]},"metadata":{},"sourceType":"module"}