{"ast":null,"code":"import _regeneratorRuntime from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/vadym/Documents/work/job/wedge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as REST from '../../api/rest';\nimport history from '../../history';\nimport Cookie from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport { createEcosystemFailed, createEcosystemStarted, createEcosystemSuccess, fetchingEcosystemsFailure, fetchingEcosystemsStarted, fetchingEcosystemsSuccess, setCurrentEcosystem } from '../../store/ecosystems/actions';\nexport function fetchEcosystems() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                dispatch(fetchingEcosystemsStarted());\n                _context.next = 4;\n                return REST.fetchEcosystems({\n                  customer: getState().auth.selectedCustomer.id\n                });\n\n              case 4:\n                results = _context.sent;\n                dispatch(fetchingEcosystemsSuccess(results));\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                dispatch(fetchingEcosystemsFailure(_context.t0));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function openEcosystem(ecosystem) {\n  return function (dispatch) {\n    dispatch(setCurrentEcosystem(ecosystem));\n    Cookie.set('currentEcosystem', ecosystem);\n    history.push(\"/ecosystems/\".concat(ecosystem.uuid, \"/objects\")); // TO BE CHANGED later\n  };\n}\nexport function createEcosystem(ecosystem) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var results;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                dispatch(createEcosystemStarted());\n                _context2.next = 4;\n                return REST.createEcosystem({\n                  entity: ecosystem,\n                  customer: getState().auth.selectedCustomer.id\n                });\n\n              case 4:\n                results = _context2.sent;\n                dispatch(createEcosystemSuccess(results));\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                dispatch(createEcosystemFailed(_context2.t0));\n                toast.error('Creation ecosystem failed. Try again later!');\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/vadym/Documents/work/job/wedge/src/views/Ecosystems/scenario-actions.js"],"names":["REST","history","Cookie","toast","createEcosystemFailed","createEcosystemStarted","createEcosystemSuccess","fetchingEcosystemsFailure","fetchingEcosystemsStarted","fetchingEcosystemsSuccess","setCurrentEcosystem","fetchEcosystems","dispatch","getState","customer","auth","selectedCustomer","id","results","openEcosystem","ecosystem","set","push","uuid","createEcosystem","entity","error"],"mappings":";;AAAA,OAAO,KAAKA,IAAZ,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SACCC,qBADD,EAECC,sBAFD,EAGCC,sBAHD,EAICC,yBAJD,EAKCC,yBALD,EAMCC,yBAND,EAOCC,mBAPD,QAQO,gCARP;AAUA,OAAO,SAASC,eAAT,GAA2B;AACjC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELD,gBAAAA,QAAQ,CAACJ,yBAAyB,EAA1B,CAAR;AAFK;AAAA,uBAGiBR,IAAI,CAACW,eAAL,CAAqB;AAC1CG,kBAAAA,QAAQ,EAAED,QAAQ,GAAGE,IAAX,CAAgBC,gBAAhB,CAAiCC;AADD,iBAArB,CAHjB;;AAAA;AAGCC,gBAAAA,OAHD;AAMLN,gBAAAA,QAAQ,CAACH,yBAAyB,CAACS,OAAD,CAA1B,CAAR;AANK;AAAA;;AAAA;AAAA;AAAA;AAQLN,gBAAAA,QAAQ,CAACL,yBAAyB,aAA1B,CAAR;;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAED,OAAO,SAASY,aAAT,CAAuBC,SAAvB,EAAkC;AACxC,SAAO,UAAAR,QAAQ,EAAI;AAClBA,IAAAA,QAAQ,CAACF,mBAAmB,CAACU,SAAD,CAApB,CAAR;AACAlB,IAAAA,MAAM,CAACmB,GAAP,CAAW,kBAAX,EAA+BD,SAA/B;AACAnB,IAAAA,OAAO,CAACqB,IAAR,uBAA4BF,SAAS,CAACG,IAAtC,eAHkB,CAGoC;AACtD,GAJD;AAKA;AAED,OAAO,SAASC,eAAT,CAAyBJ,SAAzB,EAAoC;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOR,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELD,gBAAAA,QAAQ,CAACP,sBAAsB,EAAvB,CAAR;AAFK;AAAA,uBAGiBL,IAAI,CAACwB,eAAL,CAAqB;AAC1CC,kBAAAA,MAAM,EAAEL,SADkC;AAE1CN,kBAAAA,QAAQ,EAAED,QAAQ,GAAGE,IAAX,CAAgBC,gBAAhB,CAAiCC;AAFD,iBAArB,CAHjB;;AAAA;AAGCC,gBAAAA,OAHD;AAOLN,gBAAAA,QAAQ,CAACN,sBAAsB,CAACY,OAAD,CAAvB,CAAR;AAPK;AAAA;;AAAA;AAAA;AAAA;AASLN,gBAAAA,QAAQ,CAACR,qBAAqB,cAAtB,CAAR;AACAD,gBAAAA,KAAK,CAACuB,KAAN,CAAY,6CAAZ;;AAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA","sourcesContent":["import * as REST from '../../api/rest'\nimport history from '../../history'\nimport Cookie from 'js-cookie'\nimport { toast } from 'react-toastify'\nimport {\n\tcreateEcosystemFailed,\n\tcreateEcosystemStarted,\n\tcreateEcosystemSuccess,\n\tfetchingEcosystemsFailure,\n\tfetchingEcosystemsStarted,\n\tfetchingEcosystemsSuccess,\n\tsetCurrentEcosystem\n} from '../../store/ecosystems/actions'\n\nexport function fetchEcosystems() {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tdispatch(fetchingEcosystemsStarted())\n\t\t\tconst results = await REST.fetchEcosystems({\n\t\t\t\tcustomer: getState().auth.selectedCustomer.id\n\t\t\t})\n\t\t\tdispatch(fetchingEcosystemsSuccess(results))\n\t\t} catch (err) {\n\t\t\tdispatch(fetchingEcosystemsFailure(err))\n\t\t}\n\t}\n}\n\nexport function openEcosystem(ecosystem) {\n\treturn dispatch => {\n\t\tdispatch(setCurrentEcosystem(ecosystem))\n\t\tCookie.set('currentEcosystem', ecosystem)\n\t\thistory.push(`/ecosystems/${ecosystem.uuid}/objects`) // TO BE CHANGED later\n\t}\n}\n\nexport function createEcosystem(ecosystem) {\n\treturn async (dispatch, getState) => {\n\t\ttry {\n\t\t\tdispatch(createEcosystemStarted())\n\t\t\tconst results = await REST.createEcosystem({\n\t\t\t\tentity: ecosystem,\n\t\t\t\tcustomer: getState().auth.selectedCustomer.id\n\t\t\t})\n\t\t\tdispatch(createEcosystemSuccess(results))\n\t\t} catch (err) {\n\t\t\tdispatch(createEcosystemFailed(err))\n\t\t\ttoast.error('Creation ecosystem failed. Try again later!')\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}